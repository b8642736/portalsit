'------------------------------------------------------------------------------
' <auto-generated>
'     這段程式碼是由工具產生的。
'     執行階段版本:4.0.30319.1
'
'     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
'     變更將會遺失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="IM")>  _
Partial Public Class IMDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "擴充性方法定義"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertMessage(instance As Message)
    End Sub
  Partial Private Sub UpdateMessage(instance As Message)
    End Sub
  Partial Private Sub DeleteMessage(instance As Message)
    End Sub
  Partial Private Sub InsertMessageToFiles(instance As MessageToFiles)
    End Sub
  Partial Private Sub UpdateMessageToFiles(instance As MessageToFiles)
    End Sub
  Partial Private Sub DeleteMessageToFiles(instance As MessageToFiles)
    End Sub
  Partial Private Sub InsertSite(instance As Site)
    End Sub
  Partial Private Sub UpdateSite(instance As Site)
    End Sub
  Partial Private Sub DeleteSite(instance As Site)
    End Sub
  Partial Private Sub InsertSiteGroup(instance As SiteGroup)
    End Sub
  Partial Private Sub UpdateSiteGroup(instance As SiteGroup)
    End Sub
  Partial Private Sub DeleteSiteGroup(instance As SiteGroup)
    End Sub
  Partial Private Sub InsertSiteGroupToMessage(instance As SiteGroupToMessage)
    End Sub
  Partial Private Sub UpdateSiteGroupToMessage(instance As SiteGroupToMessage)
    End Sub
  Partial Private Sub DeleteSiteGroupToMessage(instance As SiteGroupToMessage)
    End Sub
  Partial Private Sub InsertSiteGroupToSite(instance As SiteGroupToSite)
    End Sub
  Partial Private Sub UpdateSiteGroupToSite(instance As SiteGroupToSite)
    End Sub
  Partial Private Sub DeleteSiteGroupToSite(instance As SiteGroupToSite)
    End Sub
  Partial Private Sub InsertSiteUser(instance As SiteUser)
    End Sub
  Partial Private Sub UpdateSiteUser(instance As SiteUser)
    End Sub
  Partial Private Sub DeleteSiteUser(instance As SiteUser)
    End Sub
  Partial Private Sub InsertRemoteServer(instance As RemoteServer)
    End Sub
  Partial Private Sub UpdateRemoteServer(instance As RemoteServer)
    End Sub
  Partial Private Sub DeleteRemoteServer(instance As RemoteServer)
    End Sub
  Partial Private Sub InsertMessageToSiteUsers(instance As MessageToSiteUsers)
    End Sub
  Partial Private Sub UpdateMessageToSiteUsers(instance As MessageToSiteUsers)
    End Sub
  Partial Private Sub DeleteMessageToSiteUsers(instance As MessageToSiteUsers)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.CompanyLINQDB.My.MySettings.Default.Server1_IM, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Message() As System.Data.Linq.Table(Of Message)
		Get
			Return Me.GetTable(Of Message)
		End Get
	End Property
	
	Public ReadOnly Property MessageToFiles() As System.Data.Linq.Table(Of MessageToFiles)
		Get
			Return Me.GetTable(Of MessageToFiles)
		End Get
	End Property
	
	Public ReadOnly Property Site() As System.Data.Linq.Table(Of Site)
		Get
			Return Me.GetTable(Of Site)
		End Get
	End Property
	
	Public ReadOnly Property SiteGroup() As System.Data.Linq.Table(Of SiteGroup)
		Get
			Return Me.GetTable(Of SiteGroup)
		End Get
	End Property
	
	Public ReadOnly Property SiteGroupToMessage() As System.Data.Linq.Table(Of SiteGroupToMessage)
		Get
			Return Me.GetTable(Of SiteGroupToMessage)
		End Get
	End Property
	
	Public ReadOnly Property SiteGroupToSite() As System.Data.Linq.Table(Of SiteGroupToSite)
		Get
			Return Me.GetTable(Of SiteGroupToSite)
		End Get
	End Property
	
	Public ReadOnly Property SiteUser() As System.Data.Linq.Table(Of SiteUser)
		Get
			Return Me.GetTable(Of SiteUser)
		End Get
	End Property
	
	Public ReadOnly Property RemoteServer() As System.Data.Linq.Table(Of RemoteServer)
		Get
			Return Me.GetTable(Of RemoteServer)
		End Get
	End Property
	
	Public ReadOnly Property MessageToSiteUsers() As System.Data.Linq.Table(Of MessageToSiteUsers)
		Get
			Return Me.GetTable(Of MessageToSiteUsers)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Message")>  _
Partial Public Class Message
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As String
	
	Private _MsgText As String
	
	Private _IsHaveFinalRecieveTime As Boolean
	
	Private _FinalRecieveMinuteSpan As System.Nullable(Of Decimal)
	
	Private _IsHaveNotSendReplyTime As Boolean
	
	Private _NotSendReplyMinuteSpan As System.Nullable(Of Decimal)
	
	Private _IsNeedSendEmail As Boolean
	
	Private _SiteGroupToMessage As EntitySet(Of SiteGroupToMessage)
	
    #Region "擴充性方法定義"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As String)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnMsgTextChanging(value As String)
    End Sub
    Partial Private Sub OnMsgTextChanged()
    End Sub
    Partial Private Sub OnIsHaveFinalRecieveTimeChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsHaveFinalRecieveTimeChanged()
    End Sub
    Partial Private Sub OnFinalRecieveMinuteSpanChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnFinalRecieveMinuteSpanChanged()
    End Sub
    Partial Private Sub OnIsHaveNotSendReplyTimeChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsHaveNotSendReplyTimeChanged()
    End Sub
    Partial Private Sub OnNotSendReplyMinuteSpanChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnNotSendReplyMinuteSpanChanged()
    End Sub
    Partial Private Sub OnIsNeedSendEmailChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsNeedSendEmailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SiteGroupToMessage = New EntitySet(Of SiteGroupToMessage)(AddressOf Me.attach_SiteGroupToMessage, AddressOf Me.detach_SiteGroupToMessage)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="NChar(38) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ID() As String
		Get
			Return Me._ID
		End Get
		Set
			If (String.Equals(Me._ID, value) = false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MsgText", DbType:="NChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property MsgText() As String
		Get
			Return Me._MsgText
		End Get
		Set
			If (String.Equals(Me._MsgText, value) = false) Then
				Me.OnMsgTextChanging(value)
				Me.SendPropertyChanging
				Me._MsgText = value
				Me.SendPropertyChanged("MsgText")
				Me.OnMsgTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsHaveFinalRecieveTime", DbType:="Bit NOT NULL")>  _
	Public Property IsHaveFinalRecieveTime() As Boolean
		Get
			Return Me._IsHaveFinalRecieveTime
		End Get
		Set
			If ((Me._IsHaveFinalRecieveTime = value)  _
						= false) Then
				Me.OnIsHaveFinalRecieveTimeChanging(value)
				Me.SendPropertyChanging
				Me._IsHaveFinalRecieveTime = value
				Me.SendPropertyChanged("IsHaveFinalRecieveTime")
				Me.OnIsHaveFinalRecieveTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinalRecieveMinuteSpan", DbType:="Decimal(18,1)")>  _
	Public Property FinalRecieveMinuteSpan() As System.Nullable(Of Decimal)
		Get
			Return Me._FinalRecieveMinuteSpan
		End Get
		Set
			If (Me._FinalRecieveMinuteSpan.Equals(value) = false) Then
				Me.OnFinalRecieveMinuteSpanChanging(value)
				Me.SendPropertyChanging
				Me._FinalRecieveMinuteSpan = value
				Me.SendPropertyChanged("FinalRecieveMinuteSpan")
				Me.OnFinalRecieveMinuteSpanChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsHaveNotSendReplyTime", DbType:="Bit NOT NULL")>  _
	Public Property IsHaveNotSendReplyTime() As Boolean
		Get
			Return Me._IsHaveNotSendReplyTime
		End Get
		Set
			If ((Me._IsHaveNotSendReplyTime = value)  _
						= false) Then
				Me.OnIsHaveNotSendReplyTimeChanging(value)
				Me.SendPropertyChanging
				Me._IsHaveNotSendReplyTime = value
				Me.SendPropertyChanged("IsHaveNotSendReplyTime")
				Me.OnIsHaveNotSendReplyTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NotSendReplyMinuteSpan", DbType:="Decimal(18,1)")>  _
	Public Property NotSendReplyMinuteSpan() As System.Nullable(Of Decimal)
		Get
			Return Me._NotSendReplyMinuteSpan
		End Get
		Set
			If (Me._NotSendReplyMinuteSpan.Equals(value) = false) Then
				Me.OnNotSendReplyMinuteSpanChanging(value)
				Me.SendPropertyChanging
				Me._NotSendReplyMinuteSpan = value
				Me.SendPropertyChanged("NotSendReplyMinuteSpan")
				Me.OnNotSendReplyMinuteSpanChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsNeedSendEmail", DbType:="Bit NOT NULL")>  _
	Public Property IsNeedSendEmail() As Boolean
		Get
			Return Me._IsNeedSendEmail
		End Get
		Set
			If ((Me._IsNeedSendEmail = value)  _
						= false) Then
				Me.OnIsNeedSendEmailChanging(value)
				Me.SendPropertyChanging
				Me._IsNeedSendEmail = value
				Me.SendPropertyChanged("IsNeedSendEmail")
				Me.OnIsNeedSendEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Message_SiteGroupToMessage", Storage:="_SiteGroupToMessage", ThisKey:="ID", OtherKey:="FK_MessageID")>  _
	Public Property SiteGroupToMessage() As EntitySet(Of SiteGroupToMessage)
		Get
			Return Me._SiteGroupToMessage
		End Get
		Set
			Me._SiteGroupToMessage.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SiteGroupToMessage(ByVal entity As SiteGroupToMessage)
		Me.SendPropertyChanging
		entity.Message = Me
	End Sub
	
	Private Sub detach_SiteGroupToMessage(ByVal entity As SiteGroupToMessage)
		Me.SendPropertyChanging
		entity.Message = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MessageToFiles")>  _
Partial Public Class MessageToFiles
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As String
	
	Private _FK_MessageID As String
	
	Private _OrginFileName As String
	
	Private _SaveFileFullPath As String
	
    #Region "擴充性方法定義"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As String)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnFK_MessageIDChanging(value As String)
    End Sub
    Partial Private Sub OnFK_MessageIDChanged()
    End Sub
    Partial Private Sub OnOrginFileNameChanging(value As String)
    End Sub
    Partial Private Sub OnOrginFileNameChanged()
    End Sub
    Partial Private Sub OnSaveFileFullPathChanging(value As String)
    End Sub
    Partial Private Sub OnSaveFileFullPathChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="NChar(38) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ID() As String
		Get
			Return Me._ID
		End Get
		Set
			If (String.Equals(Me._ID, value) = false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FK_MessageID", DbType:="NChar(38) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property FK_MessageID() As String
		Get
			Return Me._FK_MessageID
		End Get
		Set
			If (String.Equals(Me._FK_MessageID, value) = false) Then
				Me.OnFK_MessageIDChanging(value)
				Me.SendPropertyChanging
				Me._FK_MessageID = value
				Me.SendPropertyChanged("FK_MessageID")
				Me.OnFK_MessageIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrginFileName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property OrginFileName() As String
		Get
			Return Me._OrginFileName
		End Get
		Set
			If (String.Equals(Me._OrginFileName, value) = false) Then
				Me.OnOrginFileNameChanging(value)
				Me.SendPropertyChanging
				Me._OrginFileName = value
				Me.SendPropertyChanged("OrginFileName")
				Me.OnOrginFileNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SaveFileFullPath", DbType:="NChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property SaveFileFullPath() As String
		Get
			Return Me._SaveFileFullPath
		End Get
		Set
			If (String.Equals(Me._SaveFileFullPath, value) = false) Then
				Me.OnSaveFileFullPathChanging(value)
				Me.SendPropertyChanging
				Me._SaveFileFullPath = value
				Me.SendPropertyChanged("SaveFileFullPath")
				Me.OnSaveFileFullPathChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Site")>  _
Partial Public Class Site
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As String
	
	Private _SiteName As String
	
	Private _SiteGroupToSite As EntitySet(Of SiteGroupToSite)
	
	Private _SiteUser As EntitySet(Of SiteUser)
	
    #Region "擴充性方法定義"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As String)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnSiteNameChanging(value As String)
    End Sub
    Partial Private Sub OnSiteNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SiteGroupToSite = New EntitySet(Of SiteGroupToSite)(AddressOf Me.attach_SiteGroupToSite, AddressOf Me.detach_SiteGroupToSite)
		Me._SiteUser = New EntitySet(Of SiteUser)(AddressOf Me.attach_SiteUser, AddressOf Me.detach_SiteUser)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="NChar(38) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ID() As String
		Get
			Return Me._ID
		End Get
		Set
			If (String.Equals(Me._ID, value) = false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NChar(30)")>  _
	Public Property SiteName() As String
		Get
			Return Me._SiteName
		End Get
		Set
			If (String.Equals(Me._SiteName, value) = false) Then
				Me.OnSiteNameChanging(value)
				Me.SendPropertyChanging
				Me._SiteName = value
				Me.SendPropertyChanged("SiteName")
				Me.OnSiteNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Site_SiteGroupToSite", Storage:="_SiteGroupToSite", ThisKey:="ID", OtherKey:="FK_SiteID")>  _
	Public Property SiteGroupToSite() As EntitySet(Of SiteGroupToSite)
		Get
			Return Me._SiteGroupToSite
		End Get
		Set
			Me._SiteGroupToSite.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Site_SiteUser", Storage:="_SiteUser", ThisKey:="ID", OtherKey:="FK_SiteID")>  _
	Public Property SiteUser() As EntitySet(Of SiteUser)
		Get
			Return Me._SiteUser
		End Get
		Set
			Me._SiteUser.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SiteGroupToSite(ByVal entity As SiteGroupToSite)
		Me.SendPropertyChanging
		entity.Site = Me
	End Sub
	
	Private Sub detach_SiteGroupToSite(ByVal entity As SiteGroupToSite)
		Me.SendPropertyChanging
		entity.Site = Nothing
	End Sub
	
	Private Sub attach_SiteUser(ByVal entity As SiteUser)
		Me.SendPropertyChanging
		entity.Site = Me
	End Sub
	
	Private Sub detach_SiteUser(ByVal entity As SiteUser)
		Me.SendPropertyChanging
		entity.Site = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SiteGroup")>  _
Partial Public Class SiteGroup
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As String
	
	Private _GroupName As String
	
	Private _FK_SiteGroupID As String
	
	Private _SiteGroup1 As EntitySet(Of SiteGroup)
	
	Private _SiteGroupToMessage As EntitySet(Of SiteGroupToMessage)
	
	Private _SiteGroupToSite As EntitySet(Of SiteGroupToSite)
	
	Private _SiteGroup As EntityRef(Of SiteGroup)
	
    #Region "擴充性方法定義"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As String)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnGroupNameChanging(value As String)
    End Sub
    Partial Private Sub OnGroupNameChanged()
    End Sub
    Partial Private Sub OnFK_SiteGroupIDChanging(value As String)
    End Sub
    Partial Private Sub OnFK_SiteGroupIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SiteGroup1 = New EntitySet(Of SiteGroup)(AddressOf Me.attach_SiteGroup1, AddressOf Me.detach_SiteGroup1)
		Me._SiteGroupToMessage = New EntitySet(Of SiteGroupToMessage)(AddressOf Me.attach_SiteGroupToMessage, AddressOf Me.detach_SiteGroupToMessage)
		Me._SiteGroupToSite = New EntitySet(Of SiteGroupToSite)(AddressOf Me.attach_SiteGroupToSite, AddressOf Me.detach_SiteGroupToSite)
		Me._SiteGroup = CType(Nothing, EntityRef(Of SiteGroup))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="NChar(38) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ID() As String
		Get
			Return Me._ID
		End Get
		Set
			If (String.Equals(Me._ID, value) = false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupName", DbType:="NChar(30)")>  _
	Public Property GroupName() As String
		Get
			Return Me._GroupName
		End Get
		Set
			If (String.Equals(Me._GroupName, value) = false) Then
				Me.OnGroupNameChanging(value)
				Me.SendPropertyChanging
				Me._GroupName = value
				Me.SendPropertyChanged("GroupName")
				Me.OnGroupNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FK_SiteGroupID", DbType:="NChar(38)")>  _
	Public Property FK_SiteGroupID() As String
		Get
			Return Me._FK_SiteGroupID
		End Get
		Set
			If (String.Equals(Me._FK_SiteGroupID, value) = false) Then
				If Me._SiteGroup.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFK_SiteGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._FK_SiteGroupID = value
				Me.SendPropertyChanged("FK_SiteGroupID")
				Me.OnFK_SiteGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SiteGroup_SiteGroup", Storage:="_SiteGroup1", ThisKey:="ID", OtherKey:="FK_SiteGroupID")>  _
	Public Property SiteGroup1() As EntitySet(Of SiteGroup)
		Get
			Return Me._SiteGroup1
		End Get
		Set
			Me._SiteGroup1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SiteGroup_SiteGroupToMessage", Storage:="_SiteGroupToMessage", ThisKey:="ID", OtherKey:="FK_SiteGroupID")>  _
	Public Property SiteGroupToMessage() As EntitySet(Of SiteGroupToMessage)
		Get
			Return Me._SiteGroupToMessage
		End Get
		Set
			Me._SiteGroupToMessage.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SiteGroup_SiteGroupToSite", Storage:="_SiteGroupToSite", ThisKey:="ID", OtherKey:="FK_SiteGroupID")>  _
	Public Property SiteGroupToSite() As EntitySet(Of SiteGroupToSite)
		Get
			Return Me._SiteGroupToSite
		End Get
		Set
			Me._SiteGroupToSite.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SiteGroup_SiteGroup", Storage:="_SiteGroup", ThisKey:="FK_SiteGroupID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property SiteGroup() As SiteGroup
		Get
			Return Me._SiteGroup.Entity
		End Get
		Set
			Dim previousValue As SiteGroup = Me._SiteGroup.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SiteGroup.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SiteGroup.Entity = Nothing
					previousValue.SiteGroup1.Remove(Me)
				End If
				Me._SiteGroup.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SiteGroup1.Add(Me)
					Me._FK_SiteGroupID = value.ID
				Else
					Me._FK_SiteGroupID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("SiteGroup")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SiteGroup1(ByVal entity As SiteGroup)
		Me.SendPropertyChanging
		entity.SiteGroup = Me
	End Sub
	
	Private Sub detach_SiteGroup1(ByVal entity As SiteGroup)
		Me.SendPropertyChanging
		entity.SiteGroup = Nothing
	End Sub
	
	Private Sub attach_SiteGroupToMessage(ByVal entity As SiteGroupToMessage)
		Me.SendPropertyChanging
		entity.SiteGroup = Me
	End Sub
	
	Private Sub detach_SiteGroupToMessage(ByVal entity As SiteGroupToMessage)
		Me.SendPropertyChanging
		entity.SiteGroup = Nothing
	End Sub
	
	Private Sub attach_SiteGroupToSite(ByVal entity As SiteGroupToSite)
		Me.SendPropertyChanging
		entity.SiteGroup = Me
	End Sub
	
	Private Sub detach_SiteGroupToSite(ByVal entity As SiteGroupToSite)
		Me.SendPropertyChanging
		entity.SiteGroup = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SiteGroupToMessage")>  _
Partial Public Class SiteGroupToMessage
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FK_SiteGroupID As String
	
	Private _FK_MessageID As String
	
	Private _ReadWriteMode As System.Nullable(Of Integer)
	
	Private _Message As EntityRef(Of Message)
	
	Private _SiteGroup As EntityRef(Of SiteGroup)
	
    #Region "擴充性方法定義"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFK_SiteGroupIDChanging(value As String)
    End Sub
    Partial Private Sub OnFK_SiteGroupIDChanged()
    End Sub
    Partial Private Sub OnFK_MessageIDChanging(value As String)
    End Sub
    Partial Private Sub OnFK_MessageIDChanged()
    End Sub
    Partial Private Sub OnReadWriteModeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnReadWriteModeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Message = CType(Nothing, EntityRef(Of Message))
		Me._SiteGroup = CType(Nothing, EntityRef(Of SiteGroup))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FK_SiteGroupID", DbType:="NChar(38) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property FK_SiteGroupID() As String
		Get
			Return Me._FK_SiteGroupID
		End Get
		Set
			If (String.Equals(Me._FK_SiteGroupID, value) = false) Then
				If Me._SiteGroup.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFK_SiteGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._FK_SiteGroupID = value
				Me.SendPropertyChanged("FK_SiteGroupID")
				Me.OnFK_SiteGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FK_MessageID", DbType:="NChar(38) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property FK_MessageID() As String
		Get
			Return Me._FK_MessageID
		End Get
		Set
			If (String.Equals(Me._FK_MessageID, value) = false) Then
				If Me._Message.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFK_MessageIDChanging(value)
				Me.SendPropertyChanging
				Me._FK_MessageID = value
				Me.SendPropertyChanged("FK_MessageID")
				Me.OnFK_MessageIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReadWriteMode", DbType:="Int")>  _
	Public Property ReadWriteMode() As System.Nullable(Of Integer)
		Get
			Return Me._ReadWriteMode
		End Get
		Set
			If (Me._ReadWriteMode.Equals(value) = false) Then
				Me.OnReadWriteModeChanging(value)
				Me.SendPropertyChanging
				Me._ReadWriteMode = value
				Me.SendPropertyChanged("ReadWriteMode")
				Me.OnReadWriteModeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Message_SiteGroupToMessage", Storage:="_Message", ThisKey:="FK_MessageID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Message() As Message
		Get
			Return Me._Message.Entity
		End Get
		Set
			Dim previousValue As Message = Me._Message.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Message.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Message.Entity = Nothing
					previousValue.SiteGroupToMessage.Remove(Me)
				End If
				Me._Message.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SiteGroupToMessage.Add(Me)
					Me._FK_MessageID = value.ID
				Else
					Me._FK_MessageID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Message")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SiteGroup_SiteGroupToMessage", Storage:="_SiteGroup", ThisKey:="FK_SiteGroupID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property SiteGroup() As SiteGroup
		Get
			Return Me._SiteGroup.Entity
		End Get
		Set
			Dim previousValue As SiteGroup = Me._SiteGroup.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SiteGroup.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SiteGroup.Entity = Nothing
					previousValue.SiteGroupToMessage.Remove(Me)
				End If
				Me._SiteGroup.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SiteGroupToMessage.Add(Me)
					Me._FK_SiteGroupID = value.ID
				Else
					Me._FK_SiteGroupID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("SiteGroup")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SiteGroupToSite")>  _
Partial Public Class SiteGroupToSite
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FK_SiteGroupID As String
	
	Private _FK_SiteID As String
	
	Private _Site As EntityRef(Of Site)
	
	Private _SiteGroup As EntityRef(Of SiteGroup)
	
    #Region "擴充性方法定義"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFK_SiteGroupIDChanging(value As String)
    End Sub
    Partial Private Sub OnFK_SiteGroupIDChanged()
    End Sub
    Partial Private Sub OnFK_SiteIDChanging(value As String)
    End Sub
    Partial Private Sub OnFK_SiteIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Site = CType(Nothing, EntityRef(Of Site))
		Me._SiteGroup = CType(Nothing, EntityRef(Of SiteGroup))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FK_SiteGroupID", DbType:="NChar(38) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property FK_SiteGroupID() As String
		Get
			Return Me._FK_SiteGroupID
		End Get
		Set
			If (String.Equals(Me._FK_SiteGroupID, value) = false) Then
				If Me._SiteGroup.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFK_SiteGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._FK_SiteGroupID = value
				Me.SendPropertyChanged("FK_SiteGroupID")
				Me.OnFK_SiteGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FK_SiteID", DbType:="NChar(38) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property FK_SiteID() As String
		Get
			Return Me._FK_SiteID
		End Get
		Set
			If (String.Equals(Me._FK_SiteID, value) = false) Then
				If Me._Site.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFK_SiteIDChanging(value)
				Me.SendPropertyChanging
				Me._FK_SiteID = value
				Me.SendPropertyChanged("FK_SiteID")
				Me.OnFK_SiteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Site_SiteGroupToSite", Storage:="_Site", ThisKey:="FK_SiteID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Site() As Site
		Get
			Return Me._Site.Entity
		End Get
		Set
			Dim previousValue As Site = Me._Site.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Site.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Site.Entity = Nothing
					previousValue.SiteGroupToSite.Remove(Me)
				End If
				Me._Site.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SiteGroupToSite.Add(Me)
					Me._FK_SiteID = value.ID
				Else
					Me._FK_SiteID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Site")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SiteGroup_SiteGroupToSite", Storage:="_SiteGroup", ThisKey:="FK_SiteGroupID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property SiteGroup() As SiteGroup
		Get
			Return Me._SiteGroup.Entity
		End Get
		Set
			Dim previousValue As SiteGroup = Me._SiteGroup.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SiteGroup.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SiteGroup.Entity = Nothing
					previousValue.SiteGroupToSite.Remove(Me)
				End If
				Me._SiteGroup.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SiteGroupToSite.Add(Me)
					Me._FK_SiteGroupID = value.ID
				Else
					Me._FK_SiteGroupID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("SiteGroup")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SiteUser")>  _
Partial Public Class SiteUser
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FK_SiteID As String
	
	Private _ID As String
	
	Private _UserPKeyKind As Integer
	
	Private _UserPKey As String
	
	Private _DefaultUseServerIP As String
	
	Private _Site As EntityRef(Of Site)
	
    #Region "擴充性方法定義"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFK_SiteIDChanging(value As String)
    End Sub
    Partial Private Sub OnFK_SiteIDChanged()
    End Sub
    Partial Private Sub OnIDChanging(value As String)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUserPKeyKindChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserPKeyKindChanged()
    End Sub
    Partial Private Sub OnUserPKeyChanging(value As String)
    End Sub
    Partial Private Sub OnUserPKeyChanged()
    End Sub
    Partial Private Sub OnDefaultUseServerIPChanging(value As String)
    End Sub
    Partial Private Sub OnDefaultUseServerIPChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Site = CType(Nothing, EntityRef(Of Site))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FK_SiteID", DbType:="NChar(38) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property FK_SiteID() As String
		Get
			Return Me._FK_SiteID
		End Get
		Set
			If (String.Equals(Me._FK_SiteID, value) = false) Then
				If Me._Site.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFK_SiteIDChanging(value)
				Me.SendPropertyChanging
				Me._FK_SiteID = value
				Me.SendPropertyChanged("FK_SiteID")
				Me.OnFK_SiteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="NChar(38) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ID() As String
		Get
			Return Me._ID
		End Get
		Set
			If (String.Equals(Me._ID, value) = false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserPKeyKind", DbType:="Int NOT NULL")>  _
	Public Property UserPKeyKind() As Integer
		Get
			Return Me._UserPKeyKind
		End Get
		Set
			If ((Me._UserPKeyKind = value)  _
						= false) Then
				Me.OnUserPKeyKindChanging(value)
				Me.SendPropertyChanging
				Me._UserPKeyKind = value
				Me.SendPropertyChanged("UserPKeyKind")
				Me.OnUserPKeyKindChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserPKey", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property UserPKey() As String
		Get
			Return Me._UserPKey
		End Get
		Set
			If (String.Equals(Me._UserPKey, value) = false) Then
				Me.OnUserPKeyChanging(value)
				Me.SendPropertyChanging
				Me._UserPKey = value
				Me.SendPropertyChanged("UserPKey")
				Me.OnUserPKeyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultUseServerIP", DbType:="NChar(15)")>  _
	Public Property DefaultUseServerIP() As String
		Get
			Return Me._DefaultUseServerIP
		End Get
		Set
			If (String.Equals(Me._DefaultUseServerIP, value) = false) Then
				Me.OnDefaultUseServerIPChanging(value)
				Me.SendPropertyChanging
				Me._DefaultUseServerIP = value
				Me.SendPropertyChanged("DefaultUseServerIP")
				Me.OnDefaultUseServerIPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Site_SiteUser", Storage:="_Site", ThisKey:="FK_SiteID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Site() As Site
		Get
			Return Me._Site.Entity
		End Get
		Set
			Dim previousValue As Site = Me._Site.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Site.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Site.Entity = Nothing
					previousValue.SiteUser.Remove(Me)
				End If
				Me._Site.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SiteUser.Add(Me)
					Me._FK_SiteID = value.ID
				Else
					Me._FK_SiteID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Site")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RemoteServer")>  _
Partial Public Class RemoteServer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CPUNumber As String
	
	Private _RegisterClassName As String
	
	Private _Port As String
	
	Private _RemoteProtocol As Short
	
	Private _IP As String
	
	Private _Mode As Short
	
	Private _LastRegisteredTime As System.Nullable(Of Date)
	
	Private _LastUnRegisteredTime As System.Nullable(Of Date)
	
	Private _WindowLoginName As String
	
    #Region "擴充性方法定義"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCPUNumberChanging(value As String)
    End Sub
    Partial Private Sub OnCPUNumberChanged()
    End Sub
    Partial Private Sub OnRegisterClassNameChanging(value As String)
    End Sub
    Partial Private Sub OnRegisterClassNameChanged()
    End Sub
    Partial Private Sub OnPortChanging(value As String)
    End Sub
    Partial Private Sub OnPortChanged()
    End Sub
    Partial Private Sub OnRemoteProtocolChanging(value As Short)
    End Sub
    Partial Private Sub OnRemoteProtocolChanged()
    End Sub
    Partial Private Sub OnIPChanging(value As String)
    End Sub
    Partial Private Sub OnIPChanged()
    End Sub
    Partial Private Sub OnModeChanging(value As Short)
    End Sub
    Partial Private Sub OnModeChanged()
    End Sub
    Partial Private Sub OnLastRegisteredTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastRegisteredTimeChanged()
    End Sub
    Partial Private Sub OnLastUnRegisteredTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUnRegisteredTimeChanged()
    End Sub
    Partial Private Sub OnWindowLoginNameChanging(value As String)
    End Sub
    Partial Private Sub OnWindowLoginNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CPUNumber", DbType:="NChar(16) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CPUNumber() As String
		Get
			Return Me._CPUNumber
		End Get
		Set
			If (String.Equals(Me._CPUNumber, value) = false) Then
				Me.OnCPUNumberChanging(value)
				Me.SendPropertyChanging
				Me._CPUNumber = value
				Me.SendPropertyChanged("CPUNumber")
				Me.OnCPUNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegisterClassName", DbType:="NChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property RegisterClassName() As String
		Get
			Return Me._RegisterClassName
		End Get
		Set
			If (String.Equals(Me._RegisterClassName, value) = false) Then
				Me.OnRegisterClassNameChanging(value)
				Me.SendPropertyChanging
				Me._RegisterClassName = value
				Me.SendPropertyChanged("RegisterClassName")
				Me.OnRegisterClassNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Port", DbType:="NChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Port() As String
		Get
			Return Me._Port
		End Get
		Set
			If (String.Equals(Me._Port, value) = false) Then
				Me.OnPortChanging(value)
				Me.SendPropertyChanging
				Me._Port = value
				Me.SendPropertyChanged("Port")
				Me.OnPortChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RemoteProtocol", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property RemoteProtocol() As Short
		Get
			Return Me._RemoteProtocol
		End Get
		Set
			If ((Me._RemoteProtocol = value)  _
						= false) Then
				Me.OnRemoteProtocolChanging(value)
				Me.SendPropertyChanging
				Me._RemoteProtocol = value
				Me.SendPropertyChanged("RemoteProtocol")
				Me.OnRemoteProtocolChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IP", DbType:="NChar(15) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property IP() As String
		Get
			Return Me._IP
		End Get
		Set
			If (String.Equals(Me._IP, value) = false) Then
				Me.OnIPChanging(value)
				Me.SendPropertyChanging
				Me._IP = value
				Me.SendPropertyChanged("IP")
				Me.OnIPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mode", DbType:="SmallInt NOT NULL")>  _
	Public Property Mode() As Short
		Get
			Return Me._Mode
		End Get
		Set
			If ((Me._Mode = value)  _
						= false) Then
				Me.OnModeChanging(value)
				Me.SendPropertyChanging
				Me._Mode = value
				Me.SendPropertyChanged("Mode")
				Me.OnModeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastRegisteredTime", DbType:="DateTime")>  _
	Public Property LastRegisteredTime() As System.Nullable(Of Date)
		Get
			Return Me._LastRegisteredTime
		End Get
		Set
			If (Me._LastRegisteredTime.Equals(value) = false) Then
				Me.OnLastRegisteredTimeChanging(value)
				Me.SendPropertyChanging
				Me._LastRegisteredTime = value
				Me.SendPropertyChanged("LastRegisteredTime")
				Me.OnLastRegisteredTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUnRegisteredTime", DbType:="DateTime")>  _
	Public Property LastUnRegisteredTime() As System.Nullable(Of Date)
		Get
			Return Me._LastUnRegisteredTime
		End Get
		Set
			If (Me._LastUnRegisteredTime.Equals(value) = false) Then
				Me.OnLastUnRegisteredTimeChanging(value)
				Me.SendPropertyChanging
				Me._LastUnRegisteredTime = value
				Me.SendPropertyChanged("LastUnRegisteredTime")
				Me.OnLastUnRegisteredTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WindowLoginName", DbType:="NChar(20)")>  _
	Public Property WindowLoginName() As String
		Get
			Return Me._WindowLoginName
		End Get
		Set
			If (String.Equals(Me._WindowLoginName, value) = false) Then
				Me.OnWindowLoginNameChanging(value)
				Me.SendPropertyChanging
				Me._WindowLoginName = value
				Me.SendPropertyChanged("WindowLoginName")
				Me.OnWindowLoginNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MessageToSiteUsers")>  _
Partial Public Class MessageToSiteUsers
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SendMessageBatchNumber As String
	
	Private _FK_MessageID As String
	
	Private _FK_ToSiteID As String
	
	Private _FK_ToSiteUsersID As String
	
	Private _FromClientIP As String
	
	Private _SendTime As Date
	
	Private _FromWindowLoginName As String
	
	Private _IsReceived As Boolean
	
	Private _ReceiveTime As System.Nullable(Of Date)
	
	Private _IsHaveFinalRecieveTime As Boolean
	
	Private _FinalRecieveTime As System.Nullable(Of Date)
	
	Private _IsHaveNotSendReplye As Boolean
	
	Private _NotSendReplyTime As System.Nullable(Of Date)
	
	Private _IsSenderReceiveNotSendReplye As Boolean
	
	Private _SenderReceivedNotSendReplyTime As System.Nullable(Of Date)
	
	Private _MsgText As String
	
	Private _AddMsgContent As String
	
	Private _ToSendEmailAddress As String
	
	Private _SystemFirstReceiveTime As System.Nullable(Of Date)
	
	Private _SystemLastReceiveTime As System.Nullable(Of Date)
	
	Private _WaitReceived2CheckIP As String
	
    #Region "擴充性方法定義"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSendMessageBatchNumberChanging(value As String)
    End Sub
    Partial Private Sub OnSendMessageBatchNumberChanged()
    End Sub
    Partial Private Sub OnFK_MessageIDChanging(value As String)
    End Sub
    Partial Private Sub OnFK_MessageIDChanged()
    End Sub
    Partial Private Sub OnFK_ToSiteIDChanging(value As String)
    End Sub
    Partial Private Sub OnFK_ToSiteIDChanged()
    End Sub
    Partial Private Sub OnFK_ToSiteUsersIDChanging(value As String)
    End Sub
    Partial Private Sub OnFK_ToSiteUsersIDChanged()
    End Sub
    Partial Private Sub OnFromClientIPChanging(value As String)
    End Sub
    Partial Private Sub OnFromClientIPChanged()
    End Sub
    Partial Private Sub OnSendTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnSendTimeChanged()
    End Sub
    Partial Private Sub OnFromWindowLoginNameChanging(value As String)
    End Sub
    Partial Private Sub OnFromWindowLoginNameChanged()
    End Sub
    Partial Private Sub OnIsReceivedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsReceivedChanged()
    End Sub
    Partial Private Sub OnReceiveTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnReceiveTimeChanged()
    End Sub
    Partial Private Sub OnIsHaveFinalRecieveTimeChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsHaveFinalRecieveTimeChanged()
    End Sub
    Partial Private Sub OnFinalRecieveTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFinalRecieveTimeChanged()
    End Sub
    Partial Private Sub OnIsHaveNotSendReplyeChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsHaveNotSendReplyeChanged()
    End Sub
    Partial Private Sub OnNotSendReplyTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnNotSendReplyTimeChanged()
    End Sub
    Partial Private Sub OnIsSenderReceiveNotSendReplyeChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsSenderReceiveNotSendReplyeChanged()
    End Sub
    Partial Private Sub OnSenderReceivedNotSendReplyTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSenderReceivedNotSendReplyTimeChanged()
    End Sub
    Partial Private Sub OnMsgTextChanging(value As String)
    End Sub
    Partial Private Sub OnMsgTextChanged()
    End Sub
    Partial Private Sub OnAddMsgContentChanging(value As String)
    End Sub
    Partial Private Sub OnAddMsgContentChanged()
    End Sub
    Partial Private Sub OnToSendEmailAddressChanging(value As String)
    End Sub
    Partial Private Sub OnToSendEmailAddressChanged()
    End Sub
    Partial Private Sub OnSystemFirstReceiveTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSystemFirstReceiveTimeChanged()
    End Sub
    Partial Private Sub OnSystemLastReceiveTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSystemLastReceiveTimeChanged()
    End Sub
    Partial Private Sub OnWaitReceived2CheckIPChanging(value As String)
    End Sub
    Partial Private Sub OnWaitReceived2CheckIPChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SendMessageBatchNumber", DbType:="NChar(38) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property SendMessageBatchNumber() As String
		Get
			Return Me._SendMessageBatchNumber
		End Get
		Set
			If (String.Equals(Me._SendMessageBatchNumber, value) = false) Then
				Me.OnSendMessageBatchNumberChanging(value)
				Me.SendPropertyChanging
				Me._SendMessageBatchNumber = value
				Me.SendPropertyChanged("SendMessageBatchNumber")
				Me.OnSendMessageBatchNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FK_MessageID", DbType:="NChar(38) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property FK_MessageID() As String
		Get
			Return Me._FK_MessageID
		End Get
		Set
			If (String.Equals(Me._FK_MessageID, value) = false) Then
				Me.OnFK_MessageIDChanging(value)
				Me.SendPropertyChanging
				Me._FK_MessageID = value
				Me.SendPropertyChanged("FK_MessageID")
				Me.OnFK_MessageIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FK_ToSiteID", DbType:="NChar(38) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property FK_ToSiteID() As String
		Get
			Return Me._FK_ToSiteID
		End Get
		Set
			If (String.Equals(Me._FK_ToSiteID, value) = false) Then
				Me.OnFK_ToSiteIDChanging(value)
				Me.SendPropertyChanging
				Me._FK_ToSiteID = value
				Me.SendPropertyChanged("FK_ToSiteID")
				Me.OnFK_ToSiteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FK_ToSiteUsersID", DbType:="NChar(38) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property FK_ToSiteUsersID() As String
		Get
			Return Me._FK_ToSiteUsersID
		End Get
		Set
			If (String.Equals(Me._FK_ToSiteUsersID, value) = false) Then
				Me.OnFK_ToSiteUsersIDChanging(value)
				Me.SendPropertyChanging
				Me._FK_ToSiteUsersID = value
				Me.SendPropertyChanged("FK_ToSiteUsersID")
				Me.OnFK_ToSiteUsersIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FromClientIP", DbType:="NChar(15) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property FromClientIP() As String
		Get
			Return Me._FromClientIP
		End Get
		Set
			If (String.Equals(Me._FromClientIP, value) = false) Then
				Me.OnFromClientIPChanging(value)
				Me.SendPropertyChanging
				Me._FromClientIP = value
				Me.SendPropertyChanged("FromClientIP")
				Me.OnFromClientIPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SendTime", DbType:="DateTime NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SendTime() As Date
		Get
			Return Me._SendTime
		End Get
		Set
			If ((Me._SendTime = value)  _
						= false) Then
				Me.OnSendTimeChanging(value)
				Me.SendPropertyChanging
				Me._SendTime = value
				Me.SendPropertyChanged("SendTime")
				Me.OnSendTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FromWindowLoginName", DbType:="NChar(13)")>  _
	Public Property FromWindowLoginName() As String
		Get
			Return Me._FromWindowLoginName
		End Get
		Set
			If (String.Equals(Me._FromWindowLoginName, value) = false) Then
				Me.OnFromWindowLoginNameChanging(value)
				Me.SendPropertyChanging
				Me._FromWindowLoginName = value
				Me.SendPropertyChanged("FromWindowLoginName")
				Me.OnFromWindowLoginNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsReceived", DbType:="Bit NOT NULL")>  _
	Public Property IsReceived() As Boolean
		Get
			Return Me._IsReceived
		End Get
		Set
			If ((Me._IsReceived = value)  _
						= false) Then
				Me.OnIsReceivedChanging(value)
				Me.SendPropertyChanging
				Me._IsReceived = value
				Me.SendPropertyChanged("IsReceived")
				Me.OnIsReceivedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReceiveTime", DbType:="DateTime")>  _
	Public Property ReceiveTime() As System.Nullable(Of Date)
		Get
			Return Me._ReceiveTime
		End Get
		Set
			If (Me._ReceiveTime.Equals(value) = false) Then
				Me.OnReceiveTimeChanging(value)
				Me.SendPropertyChanging
				Me._ReceiveTime = value
				Me.SendPropertyChanged("ReceiveTime")
				Me.OnReceiveTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsHaveFinalRecieveTime", DbType:="Bit NOT NULL")>  _
	Public Property IsHaveFinalRecieveTime() As Boolean
		Get
			Return Me._IsHaveFinalRecieveTime
		End Get
		Set
			If ((Me._IsHaveFinalRecieveTime = value)  _
						= false) Then
				Me.OnIsHaveFinalRecieveTimeChanging(value)
				Me.SendPropertyChanging
				Me._IsHaveFinalRecieveTime = value
				Me.SendPropertyChanged("IsHaveFinalRecieveTime")
				Me.OnIsHaveFinalRecieveTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinalRecieveTime", DbType:="DateTime")>  _
	Public Property FinalRecieveTime() As System.Nullable(Of Date)
		Get
			Return Me._FinalRecieveTime
		End Get
		Set
			If (Me._FinalRecieveTime.Equals(value) = false) Then
				Me.OnFinalRecieveTimeChanging(value)
				Me.SendPropertyChanging
				Me._FinalRecieveTime = value
				Me.SendPropertyChanged("FinalRecieveTime")
				Me.OnFinalRecieveTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsHaveNotSendReplye", DbType:="Bit NOT NULL")>  _
	Public Property IsHaveNotSendReplye() As Boolean
		Get
			Return Me._IsHaveNotSendReplye
		End Get
		Set
			If ((Me._IsHaveNotSendReplye = value)  _
						= false) Then
				Me.OnIsHaveNotSendReplyeChanging(value)
				Me.SendPropertyChanging
				Me._IsHaveNotSendReplye = value
				Me.SendPropertyChanged("IsHaveNotSendReplye")
				Me.OnIsHaveNotSendReplyeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NotSendReplyTime", DbType:="DateTime")>  _
	Public Property NotSendReplyTime() As System.Nullable(Of Date)
		Get
			Return Me._NotSendReplyTime
		End Get
		Set
			If (Me._NotSendReplyTime.Equals(value) = false) Then
				Me.OnNotSendReplyTimeChanging(value)
				Me.SendPropertyChanging
				Me._NotSendReplyTime = value
				Me.SendPropertyChanged("NotSendReplyTime")
				Me.OnNotSendReplyTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsSenderReceiveNotSendReplye", DbType:="Bit NOT NULL")>  _
	Public Property IsSenderReceiveNotSendReplye() As Boolean
		Get
			Return Me._IsSenderReceiveNotSendReplye
		End Get
		Set
			If ((Me._IsSenderReceiveNotSendReplye = value)  _
						= false) Then
				Me.OnIsSenderReceiveNotSendReplyeChanging(value)
				Me.SendPropertyChanging
				Me._IsSenderReceiveNotSendReplye = value
				Me.SendPropertyChanged("IsSenderReceiveNotSendReplye")
				Me.OnIsSenderReceiveNotSendReplyeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SenderReceivedNotSendReplyTime", DbType:="DateTime")>  _
	Public Property SenderReceivedNotSendReplyTime() As System.Nullable(Of Date)
		Get
			Return Me._SenderReceivedNotSendReplyTime
		End Get
		Set
			If (Me._SenderReceivedNotSendReplyTime.Equals(value) = false) Then
				Me.OnSenderReceivedNotSendReplyTimeChanging(value)
				Me.SendPropertyChanging
				Me._SenderReceivedNotSendReplyTime = value
				Me.SendPropertyChanged("SenderReceivedNotSendReplyTime")
				Me.OnSenderReceivedNotSendReplyTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MsgText", DbType:="NChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property MsgText() As String
		Get
			Return Me._MsgText
		End Get
		Set
			If (String.Equals(Me._MsgText, value) = false) Then
				Me.OnMsgTextChanging(value)
				Me.SendPropertyChanging
				Me._MsgText = value
				Me.SendPropertyChanged("MsgText")
				Me.OnMsgTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddMsgContent", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property AddMsgContent() As String
		Get
			Return Me._AddMsgContent
		End Get
		Set
			If (String.Equals(Me._AddMsgContent, value) = false) Then
				Me.OnAddMsgContentChanging(value)
				Me.SendPropertyChanging
				Me._AddMsgContent = value
				Me.SendPropertyChanged("AddMsgContent")
				Me.OnAddMsgContentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ToSendEmailAddress", DbType:="NChar(30)")>  _
	Public Property ToSendEmailAddress() As String
		Get
			Return Me._ToSendEmailAddress
		End Get
		Set
			If (String.Equals(Me._ToSendEmailAddress, value) = false) Then
				Me.OnToSendEmailAddressChanging(value)
				Me.SendPropertyChanging
				Me._ToSendEmailAddress = value
				Me.SendPropertyChanged("ToSendEmailAddress")
				Me.OnToSendEmailAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SystemFirstReceiveTime", DbType:="DateTime")>  _
	Public Property SystemFirstReceiveTime() As System.Nullable(Of Date)
		Get
			Return Me._SystemFirstReceiveTime
		End Get
		Set
			If (Me._SystemFirstReceiveTime.Equals(value) = false) Then
				Me.OnSystemFirstReceiveTimeChanging(value)
				Me.SendPropertyChanging
				Me._SystemFirstReceiveTime = value
				Me.SendPropertyChanged("SystemFirstReceiveTime")
				Me.OnSystemFirstReceiveTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SystemLastReceiveTime", DbType:="DateTime")>  _
	Public Property SystemLastReceiveTime() As System.Nullable(Of Date)
		Get
			Return Me._SystemLastReceiveTime
		End Get
		Set
			If (Me._SystemLastReceiveTime.Equals(value) = false) Then
				Me.OnSystemLastReceiveTimeChanging(value)
				Me.SendPropertyChanging
				Me._SystemLastReceiveTime = value
				Me.SendPropertyChanged("SystemLastReceiveTime")
				Me.OnSystemLastReceiveTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WaitReceived2CheckIP", DbType:="NChar(15)")>  _
	Public Property WaitReceived2CheckIP() As String
		Get
			Return Me._WaitReceived2CheckIP
		End Get
		Set
			If (String.Equals(Me._WaitReceived2CheckIP, value) = false) Then
				Me.OnWaitReceived2CheckIPChanging(value)
				Me.SendPropertyChanging
				Me._WaitReceived2CheckIP = value
				Me.SendPropertyChanged("WaitReceived2CheckIP")
				Me.OnWaitReceived2CheckIPChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
