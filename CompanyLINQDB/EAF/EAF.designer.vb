'------------------------------------------------------------------------------
' <auto-generated>
'     這段程式碼是由工具產生的。
'     執行階段版本:4.0.30319.1
'
'     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
'     變更將會遺失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="QCdb01")>  _
Partial Public Class EAFDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "擴充性方法定義"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertEAFT1(instance As EAFT1)
    End Sub
  Partial Private Sub UpdateEAFT1(instance As EAFT1)
    End Sub
  Partial Private Sub DeleteEAFT1(instance As EAFT1)
    End Sub
  Partial Private Sub InsertEAFT3(instance As EAFT3)
    End Sub
  Partial Private Sub UpdateEAFT3(instance As EAFT3)
    End Sub
  Partial Private Sub DeleteEAFT3(instance As EAFT3)
    End Sub
  Partial Private Sub InsertEAFT2(instance As EAFT2)
    End Sub
  Partial Private Sub UpdateEAFT2(instance As EAFT2)
    End Sub
  Partial Private Sub DeleteEAFT2(instance As EAFT2)
    End Sub
  Partial Private Sub InsertEAFT2_Analysis(instance As EAFT2_Analysis)
    End Sub
  Partial Private Sub UpdateEAFT2_Analysis(instance As EAFT2_Analysis)
    End Sub
  Partial Private Sub DeleteEAFT2_Analysis(instance As EAFT2_Analysis)
    End Sub
  Partial Private Sub InsertEAFT2_OperatorType(instance As EAFT2_OperatorType)
    End Sub
  Partial Private Sub UpdateEAFT2_OperatorType(instance As EAFT2_OperatorType)
    End Sub
  Partial Private Sub DeleteEAFT2_OperatorType(instance As EAFT2_OperatorType)
    End Sub
  Partial Private Sub InsertEAFT2_Wait(instance As EAFT2_Wait)
    End Sub
  Partial Private Sub UpdateEAFT2_Wait(instance As EAFT2_Wait)
    End Sub
  Partial Private Sub DeleteEAFT2_Wait(instance As EAFT2_Wait)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.CompanyLINQDB.My.MySettings.Default.Server1_QCdb01, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property EAFT1() As System.Data.Linq.Table(Of EAFT1)
		Get
			Return Me.GetTable(Of EAFT1)
		End Get
	End Property
	
	Public ReadOnly Property EAFT3() As System.Data.Linq.Table(Of EAFT3)
		Get
			Return Me.GetTable(Of EAFT3)
		End Get
	End Property
	
	Public ReadOnly Property EAFT2() As System.Data.Linq.Table(Of EAFT2)
		Get
			Return Me.GetTable(Of EAFT2)
		End Get
	End Property
	
	Public ReadOnly Property EAFT2_Analysis() As System.Data.Linq.Table(Of EAFT2_Analysis)
		Get
			Return Me.GetTable(Of EAFT2_Analysis)
		End Get
	End Property
	
	Public ReadOnly Property EAFT2_OperatorType() As System.Data.Linq.Table(Of EAFT2_OperatorType)
		Get
			Return Me.GetTable(Of EAFT2_OperatorType)
		End Get
	End Property
	
	Public ReadOnly Property EAFT2_Wait() As System.Data.Linq.Table(Of EAFT2_Wait)
		Get
			Return Me.GetTable(Of EAFT2_Wait)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EAFT1")>  _
Partial Public Class EAFT1
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As String
	
	Private _StoveNumber As String
	
	Private _Rector As String
	
	Private _SetElecticOnUser As String
	
	Private _Monitor As String
	
	Private _Class As String
	
	Private _SteelKind As String
	
	Private _DataDate As System.Nullable(Of Date)
	
	Private _LDWeight As System.Nullable(Of Double)
	
	Private _DolomiteWeight As System.Nullable(Of Double)
	
	Private _CaOWeight As System.Nullable(Of Integer)
	
	Private _FettlingWeight As System.Nullable(Of Integer)
	
	Private _TapFrequency As System.Nullable(Of Integer)
	
	Private _StoveCoverFequency As System.Nullable(Of Integer)
	
	Private _StoveWallFequency As System.Nullable(Of Decimal)
	
	Private _StoveBottomFequency As System.Nullable(Of Decimal)
	
	Private _SteelOutputWeight As System.Nullable(Of Double)
	
	Private _MoltenSteelWeight As System.Nullable(Of Decimal)
	
	Private _ResidueWeight As System.Nullable(Of Decimal)
	
	Private _StartElectricPower As System.Nullable(Of Decimal)
	
	Private _EndElectricPower As System.Nullable(Of Decimal)
	
	Private _Allocate_C As System.Nullable(Of Double)
	
	Private _Allocate_Si As System.Nullable(Of Double)
	
	Private _Allocate_Mn As System.Nullable(Of Double)
	
	Private _Allocate_P As System.Nullable(Of Double)
	
	Private _Allocate_S As System.Nullable(Of Double)
	
	Private _Allocate_Cr As System.Nullable(Of Double)
	
	Private _Allocate_Ni As System.Nullable(Of Double)
	
	Private _Allocate_Cu As System.Nullable(Of Double)
	
	Private _Allocate_Mo As System.Nullable(Of Double)
	
	Private _ConvertFileName As String
	
	Private _EAFT3 As EntitySet(Of EAFT3)
	
	Private _EAFT2 As EntitySet(Of EAFT2)
	
	Private _EAFT2_Analysis As EntitySet(Of EAFT2_Analysis)
	
	Private _EAFT2_Wait As EntitySet(Of EAFT2_Wait)
	
    #Region "擴充性方法定義"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As String)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnStoveNumberChanging(value As String)
    End Sub
    Partial Private Sub OnStoveNumberChanged()
    End Sub
    Partial Private Sub OnRectorChanging(value As String)
    End Sub
    Partial Private Sub OnRectorChanged()
    End Sub
    Partial Private Sub OnSetElecticOnUserChanging(value As String)
    End Sub
    Partial Private Sub OnSetElecticOnUserChanged()
    End Sub
    Partial Private Sub OnMonitorChanging(value As String)
    End Sub
    Partial Private Sub OnMonitorChanged()
    End Sub
    Partial Private Sub OnClassChanging(value As String)
    End Sub
    Partial Private Sub OnClassChanged()
    End Sub
    Partial Private Sub OnSteelKindChanging(value As String)
    End Sub
    Partial Private Sub OnSteelKindChanged()
    End Sub
    Partial Private Sub OnDataDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDataDateChanged()
    End Sub
    Partial Private Sub OnLDWeightChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnLDWeightChanged()
    End Sub
    Partial Private Sub OnDolomiteWeightChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDolomiteWeightChanged()
    End Sub
    Partial Private Sub OnCaOWeightChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCaOWeightChanged()
    End Sub
    Partial Private Sub OnFettlingWeightChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFettlingWeightChanged()
    End Sub
    Partial Private Sub OnTapFrequencyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTapFrequencyChanged()
    End Sub
    Partial Private Sub OnStoveCoverFequencyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStoveCoverFequencyChanged()
    End Sub
    Partial Private Sub OnStoveWallFequencyChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnStoveWallFequencyChanged()
    End Sub
    Partial Private Sub OnStoveBottomFequencyChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnStoveBottomFequencyChanged()
    End Sub
    Partial Private Sub OnSteelOutputWeightChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnSteelOutputWeightChanged()
    End Sub
    Partial Private Sub OnMoltenSteelWeightChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMoltenSteelWeightChanged()
    End Sub
    Partial Private Sub OnResidueWeightChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnResidueWeightChanged()
    End Sub
    Partial Private Sub OnStartElectricPowerChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnStartElectricPowerChanged()
    End Sub
    Partial Private Sub OnEndElectricPowerChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnEndElectricPowerChanged()
    End Sub
    Partial Private Sub OnAllocate_CChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnAllocate_CChanged()
    End Sub
    Partial Private Sub OnAllocate_SiChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnAllocate_SiChanged()
    End Sub
    Partial Private Sub OnAllocate_MnChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnAllocate_MnChanged()
    End Sub
    Partial Private Sub OnAllocate_PChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnAllocate_PChanged()
    End Sub
    Partial Private Sub OnAllocate_SChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnAllocate_SChanged()
    End Sub
    Partial Private Sub OnAllocate_CrChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnAllocate_CrChanged()
    End Sub
    Partial Private Sub OnAllocate_NiChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnAllocate_NiChanged()
    End Sub
    Partial Private Sub OnAllocate_CuChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnAllocate_CuChanged()
    End Sub
    Partial Private Sub OnAllocate_MoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnAllocate_MoChanged()
    End Sub
    Partial Private Sub OnConvertFileNameChanging(value As String)
    End Sub
    Partial Private Sub OnConvertFileNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._EAFT3 = New EntitySet(Of EAFT3)(AddressOf Me.attach_EAFT3, AddressOf Me.detach_EAFT3)
		Me._EAFT2 = New EntitySet(Of EAFT2)(AddressOf Me.attach_EAFT2, AddressOf Me.detach_EAFT2)
		Me._EAFT2_Analysis = New EntitySet(Of EAFT2_Analysis)(AddressOf Me.attach_EAFT2_Analysis, AddressOf Me.detach_EAFT2_Analysis)
		Me._EAFT2_Wait = New EntitySet(Of EAFT2_Wait)(AddressOf Me.attach_EAFT2_Wait, AddressOf Me.detach_EAFT2_Wait)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Char(38) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ID() As String
		Get
			Return Me._ID
		End Get
		Set
			If (String.Equals(Me._ID, value) = false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StoveNumber", DbType:="Char(10)")>  _
	Public Property StoveNumber() As String
		Get
			Return Me._StoveNumber
		End Get
		Set
			If (String.Equals(Me._StoveNumber, value) = false) Then
				Me.OnStoveNumberChanging(value)
				Me.SendPropertyChanging
				Me._StoveNumber = value
				Me.SendPropertyChanged("StoveNumber")
				Me.OnStoveNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rector", DbType:="Char(10)")>  _
	Public Property Rector() As String
		Get
			Return Me._Rector
		End Get
		Set
			If (String.Equals(Me._Rector, value) = false) Then
				Me.OnRectorChanging(value)
				Me.SendPropertyChanging
				Me._Rector = value
				Me.SendPropertyChanged("Rector")
				Me.OnRectorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SetElecticOnUser", DbType:="Char(10)")>  _
	Public Property SetElecticOnUser() As String
		Get
			Return Me._SetElecticOnUser
		End Get
		Set
			If (String.Equals(Me._SetElecticOnUser, value) = false) Then
				Me.OnSetElecticOnUserChanging(value)
				Me.SendPropertyChanging
				Me._SetElecticOnUser = value
				Me.SendPropertyChanged("SetElecticOnUser")
				Me.OnSetElecticOnUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Monitor", DbType:="Char(10)")>  _
	Public Property Monitor() As String
		Get
			Return Me._Monitor
		End Get
		Set
			If (String.Equals(Me._Monitor, value) = false) Then
				Me.OnMonitorChanging(value)
				Me.SendPropertyChanging
				Me._Monitor = value
				Me.SendPropertyChanged("Monitor")
				Me.OnMonitorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Class", Storage:="_Class", DbType:="Char(4)")>  _
	Public Property [Class]() As String
		Get
			Return Me._Class
		End Get
		Set
			If (String.Equals(Me._Class, value) = false) Then
				Me.OnClassChanging(value)
				Me.SendPropertyChanging
				Me._Class = value
				Me.SendPropertyChanged("[Class]")
				Me.OnClassChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SteelKind", DbType:="Char(10)")>  _
	Public Property SteelKind() As String
		Get
			Return Me._SteelKind
		End Get
		Set
			If (String.Equals(Me._SteelKind, value) = false) Then
				Me.OnSteelKindChanging(value)
				Me.SendPropertyChanging
				Me._SteelKind = value
				Me.SendPropertyChanged("SteelKind")
				Me.OnSteelKindChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataDate", DbType:="DateTime")>  _
	Public Property DataDate() As System.Nullable(Of Date)
		Get
			Return Me._DataDate
		End Get
		Set
			If (Me._DataDate.Equals(value) = false) Then
				Me.OnDataDateChanging(value)
				Me.SendPropertyChanging
				Me._DataDate = value
				Me.SendPropertyChanged("DataDate")
				Me.OnDataDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LDWeight", DbType:="Float")>  _
	Public Property LDWeight() As System.Nullable(Of Double)
		Get
			Return Me._LDWeight
		End Get
		Set
			If (Me._LDWeight.Equals(value) = false) Then
				Me.OnLDWeightChanging(value)
				Me.SendPropertyChanging
				Me._LDWeight = value
				Me.SendPropertyChanged("LDWeight")
				Me.OnLDWeightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DolomiteWeight", DbType:="Float")>  _
	Public Property DolomiteWeight() As System.Nullable(Of Double)
		Get
			Return Me._DolomiteWeight
		End Get
		Set
			If (Me._DolomiteWeight.Equals(value) = false) Then
				Me.OnDolomiteWeightChanging(value)
				Me.SendPropertyChanging
				Me._DolomiteWeight = value
				Me.SendPropertyChanged("DolomiteWeight")
				Me.OnDolomiteWeightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CaOWeight", DbType:="Int")>  _
	Public Property CaOWeight() As System.Nullable(Of Integer)
		Get
			Return Me._CaOWeight
		End Get
		Set
			If (Me._CaOWeight.Equals(value) = false) Then
				Me.OnCaOWeightChanging(value)
				Me.SendPropertyChanging
				Me._CaOWeight = value
				Me.SendPropertyChanged("CaOWeight")
				Me.OnCaOWeightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FettlingWeight", DbType:="Int")>  _
	Public Property FettlingWeight() As System.Nullable(Of Integer)
		Get
			Return Me._FettlingWeight
		End Get
		Set
			If (Me._FettlingWeight.Equals(value) = false) Then
				Me.OnFettlingWeightChanging(value)
				Me.SendPropertyChanging
				Me._FettlingWeight = value
				Me.SendPropertyChanged("FettlingWeight")
				Me.OnFettlingWeightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TapFrequency", DbType:="Int")>  _
	Public Property TapFrequency() As System.Nullable(Of Integer)
		Get
			Return Me._TapFrequency
		End Get
		Set
			If (Me._TapFrequency.Equals(value) = false) Then
				Me.OnTapFrequencyChanging(value)
				Me.SendPropertyChanging
				Me._TapFrequency = value
				Me.SendPropertyChanged("TapFrequency")
				Me.OnTapFrequencyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StoveCoverFequency", DbType:="Int")>  _
	Public Property StoveCoverFequency() As System.Nullable(Of Integer)
		Get
			Return Me._StoveCoverFequency
		End Get
		Set
			If (Me._StoveCoverFequency.Equals(value) = false) Then
				Me.OnStoveCoverFequencyChanging(value)
				Me.SendPropertyChanging
				Me._StoveCoverFequency = value
				Me.SendPropertyChanged("StoveCoverFequency")
				Me.OnStoveCoverFequencyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StoveWallFequency", DbType:="Decimal(18,0)")>  _
	Public Property StoveWallFequency() As System.Nullable(Of Decimal)
		Get
			Return Me._StoveWallFequency
		End Get
		Set
			If (Me._StoveWallFequency.Equals(value) = false) Then
				Me.OnStoveWallFequencyChanging(value)
				Me.SendPropertyChanging
				Me._StoveWallFequency = value
				Me.SendPropertyChanged("StoveWallFequency")
				Me.OnStoveWallFequencyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StoveBottomFequency", DbType:="Decimal(18,0)")>  _
	Public Property StoveBottomFequency() As System.Nullable(Of Decimal)
		Get
			Return Me._StoveBottomFequency
		End Get
		Set
			If (Me._StoveBottomFequency.Equals(value) = false) Then
				Me.OnStoveBottomFequencyChanging(value)
				Me.SendPropertyChanging
				Me._StoveBottomFequency = value
				Me.SendPropertyChanged("StoveBottomFequency")
				Me.OnStoveBottomFequencyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SteelOutputWeight", DbType:="Float")>  _
	Public Property SteelOutputWeight() As System.Nullable(Of Double)
		Get
			Return Me._SteelOutputWeight
		End Get
		Set
			If (Me._SteelOutputWeight.Equals(value) = false) Then
				Me.OnSteelOutputWeightChanging(value)
				Me.SendPropertyChanging
				Me._SteelOutputWeight = value
				Me.SendPropertyChanged("SteelOutputWeight")
				Me.OnSteelOutputWeightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MoltenSteelWeight", DbType:="Decimal(18,0)")>  _
	Public Property MoltenSteelWeight() As System.Nullable(Of Decimal)
		Get
			Return Me._MoltenSteelWeight
		End Get
		Set
			If (Me._MoltenSteelWeight.Equals(value) = false) Then
				Me.OnMoltenSteelWeightChanging(value)
				Me.SendPropertyChanging
				Me._MoltenSteelWeight = value
				Me.SendPropertyChanged("MoltenSteelWeight")
				Me.OnMoltenSteelWeightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ResidueWeight", DbType:="Decimal(18,0)")>  _
	Public Property ResidueWeight() As System.Nullable(Of Decimal)
		Get
			Return Me._ResidueWeight
		End Get
		Set
			If (Me._ResidueWeight.Equals(value) = false) Then
				Me.OnResidueWeightChanging(value)
				Me.SendPropertyChanging
				Me._ResidueWeight = value
				Me.SendPropertyChanged("ResidueWeight")
				Me.OnResidueWeightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartElectricPower", DbType:="Decimal(18,0)")>  _
	Public Property StartElectricPower() As System.Nullable(Of Decimal)
		Get
			Return Me._StartElectricPower
		End Get
		Set
			If (Me._StartElectricPower.Equals(value) = false) Then
				Me.OnStartElectricPowerChanging(value)
				Me.SendPropertyChanging
				Me._StartElectricPower = value
				Me.SendPropertyChanged("StartElectricPower")
				Me.OnStartElectricPowerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndElectricPower", DbType:="Decimal(18,0)")>  _
	Public Property EndElectricPower() As System.Nullable(Of Decimal)
		Get
			Return Me._EndElectricPower
		End Get
		Set
			If (Me._EndElectricPower.Equals(value) = false) Then
				Me.OnEndElectricPowerChanging(value)
				Me.SendPropertyChanging
				Me._EndElectricPower = value
				Me.SendPropertyChanged("EndElectricPower")
				Me.OnEndElectricPowerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Allocate_C", DbType:="Float")>  _
	Public Property Allocate_C() As System.Nullable(Of Double)
		Get
			Return Me._Allocate_C
		End Get
		Set
			If (Me._Allocate_C.Equals(value) = false) Then
				Me.OnAllocate_CChanging(value)
				Me.SendPropertyChanging
				Me._Allocate_C = value
				Me.SendPropertyChanged("Allocate_C")
				Me.OnAllocate_CChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Allocate_Si", DbType:="Float")>  _
	Public Property Allocate_Si() As System.Nullable(Of Double)
		Get
			Return Me._Allocate_Si
		End Get
		Set
			If (Me._Allocate_Si.Equals(value) = false) Then
				Me.OnAllocate_SiChanging(value)
				Me.SendPropertyChanging
				Me._Allocate_Si = value
				Me.SendPropertyChanged("Allocate_Si")
				Me.OnAllocate_SiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Allocate_Mn", DbType:="Float")>  _
	Public Property Allocate_Mn() As System.Nullable(Of Double)
		Get
			Return Me._Allocate_Mn
		End Get
		Set
			If (Me._Allocate_Mn.Equals(value) = false) Then
				Me.OnAllocate_MnChanging(value)
				Me.SendPropertyChanging
				Me._Allocate_Mn = value
				Me.SendPropertyChanged("Allocate_Mn")
				Me.OnAllocate_MnChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Allocate_P", DbType:="Float")>  _
	Public Property Allocate_P() As System.Nullable(Of Double)
		Get
			Return Me._Allocate_P
		End Get
		Set
			If (Me._Allocate_P.Equals(value) = false) Then
				Me.OnAllocate_PChanging(value)
				Me.SendPropertyChanging
				Me._Allocate_P = value
				Me.SendPropertyChanged("Allocate_P")
				Me.OnAllocate_PChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Allocate_S", DbType:="Float")>  _
	Public Property Allocate_S() As System.Nullable(Of Double)
		Get
			Return Me._Allocate_S
		End Get
		Set
			If (Me._Allocate_S.Equals(value) = false) Then
				Me.OnAllocate_SChanging(value)
				Me.SendPropertyChanging
				Me._Allocate_S = value
				Me.SendPropertyChanged("Allocate_S")
				Me.OnAllocate_SChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Allocate_Cr", DbType:="Float")>  _
	Public Property Allocate_Cr() As System.Nullable(Of Double)
		Get
			Return Me._Allocate_Cr
		End Get
		Set
			If (Me._Allocate_Cr.Equals(value) = false) Then
				Me.OnAllocate_CrChanging(value)
				Me.SendPropertyChanging
				Me._Allocate_Cr = value
				Me.SendPropertyChanged("Allocate_Cr")
				Me.OnAllocate_CrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Allocate_Ni", DbType:="Float")>  _
	Public Property Allocate_Ni() As System.Nullable(Of Double)
		Get
			Return Me._Allocate_Ni
		End Get
		Set
			If (Me._Allocate_Ni.Equals(value) = false) Then
				Me.OnAllocate_NiChanging(value)
				Me.SendPropertyChanging
				Me._Allocate_Ni = value
				Me.SendPropertyChanged("Allocate_Ni")
				Me.OnAllocate_NiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Allocate_Cu", DbType:="Float")>  _
	Public Property Allocate_Cu() As System.Nullable(Of Double)
		Get
			Return Me._Allocate_Cu
		End Get
		Set
			If (Me._Allocate_Cu.Equals(value) = false) Then
				Me.OnAllocate_CuChanging(value)
				Me.SendPropertyChanging
				Me._Allocate_Cu = value
				Me.SendPropertyChanged("Allocate_Cu")
				Me.OnAllocate_CuChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Allocate_Mo", DbType:="Float")>  _
	Public Property Allocate_Mo() As System.Nullable(Of Double)
		Get
			Return Me._Allocate_Mo
		End Get
		Set
			If (Me._Allocate_Mo.Equals(value) = false) Then
				Me.OnAllocate_MoChanging(value)
				Me.SendPropertyChanging
				Me._Allocate_Mo = value
				Me.SendPropertyChanged("Allocate_Mo")
				Me.OnAllocate_MoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConvertFileName", DbType:="Char(30)")>  _
	Public Property ConvertFileName() As String
		Get
			Return Me._ConvertFileName
		End Get
		Set
			If (String.Equals(Me._ConvertFileName, value) = false) Then
				Me.OnConvertFileNameChanging(value)
				Me.SendPropertyChanging
				Me._ConvertFileName = value
				Me.SendPropertyChanged("ConvertFileName")
				Me.OnConvertFileNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EAFT1_EAFT3", Storage:="_EAFT3", ThisKey:="ID", OtherKey:="FK_EAF1ID")>  _
	Public Property EAFT3() As EntitySet(Of EAFT3)
		Get
			Return Me._EAFT3
		End Get
		Set
			Me._EAFT3.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EAFT1_EAFT2", Storage:="_EAFT2", ThisKey:="ID", OtherKey:="FK_EAF1ID")>  _
	Public Property EAFT2() As EntitySet(Of EAFT2)
		Get
			Return Me._EAFT2
		End Get
		Set
			Me._EAFT2.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EAFT1_EAFT2_Analysis", Storage:="_EAFT2_Analysis", ThisKey:="ID", OtherKey:="FK_EAF1ID")>  _
	Public Property EAFT2_Analysis() As EntitySet(Of EAFT2_Analysis)
		Get
			Return Me._EAFT2_Analysis
		End Get
		Set
			Me._EAFT2_Analysis.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EAFT1_EAFT2_Wait", Storage:="_EAFT2_Wait", ThisKey:="ID", OtherKey:="FK_EAF1ID")>  _
	Public Property EAFT2_Wait() As EntitySet(Of EAFT2_Wait)
		Get
			Return Me._EAFT2_Wait
		End Get
		Set
			Me._EAFT2_Wait.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_EAFT3(ByVal entity As EAFT3)
		Me.SendPropertyChanging
		entity.EAFT1 = Me
	End Sub
	
	Private Sub detach_EAFT3(ByVal entity As EAFT3)
		Me.SendPropertyChanging
		entity.EAFT1 = Nothing
	End Sub
	
	Private Sub attach_EAFT2(ByVal entity As EAFT2)
		Me.SendPropertyChanging
		entity.EAFT1 = Me
	End Sub
	
	Private Sub detach_EAFT2(ByVal entity As EAFT2)
		Me.SendPropertyChanging
		entity.EAFT1 = Nothing
	End Sub
	
	Private Sub attach_EAFT2_Analysis(ByVal entity As EAFT2_Analysis)
		Me.SendPropertyChanging
		entity.EAFT1 = Me
	End Sub
	
	Private Sub detach_EAFT2_Analysis(ByVal entity As EAFT2_Analysis)
		Me.SendPropertyChanging
		entity.EAFT1 = Nothing
	End Sub
	
	Private Sub attach_EAFT2_Wait(ByVal entity As EAFT2_Wait)
		Me.SendPropertyChanging
		entity.EAFT1 = Me
	End Sub
	
	Private Sub detach_EAFT2_Wait(ByVal entity As EAFT2_Wait)
		Me.SendPropertyChanging
		entity.EAFT1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EAFT3")>  _
Partial Public Class EAFT3
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FK_EAF1ID As String
	
	Private _SampleNumber As Integer
	
	Private _C As System.Nullable(Of Decimal)
	
	Private _Si As System.Nullable(Of Decimal)
	
	Private _Mn As System.Nullable(Of Decimal)
	
	Private _P As System.Nullable(Of Decimal)
	
	Private _S As System.Nullable(Of Decimal)
	
	Private _Cr As System.Nullable(Of Decimal)
	
	Private _Ni As System.Nullable(Of Decimal)
	
	Private _Cu As System.Nullable(Of Decimal)
	
	Private _Mo As System.Nullable(Of Decimal)
	
	Private _Sn As System.Nullable(Of Decimal)
	
	Private _Pb As System.Nullable(Of Decimal)
	
	Private _Co As System.Nullable(Of Decimal)
	
	Private _EAFT1 As EntityRef(Of EAFT1)
	
    #Region "擴充性方法定義"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFK_EAF1IDChanging(value As String)
    End Sub
    Partial Private Sub OnFK_EAF1IDChanged()
    End Sub
    Partial Private Sub OnSampleNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnSampleNumberChanged()
    End Sub
    Partial Private Sub OnCChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCChanged()
    End Sub
    Partial Private Sub OnSiChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnSiChanged()
    End Sub
    Partial Private Sub OnMnChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMnChanged()
    End Sub
    Partial Private Sub OnPChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPChanged()
    End Sub
    Partial Private Sub OnSChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnSChanged()
    End Sub
    Partial Private Sub OnCrChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCrChanged()
    End Sub
    Partial Private Sub OnNiChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnNiChanged()
    End Sub
    Partial Private Sub OnCuChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCuChanged()
    End Sub
    Partial Private Sub OnMoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMoChanged()
    End Sub
    Partial Private Sub OnSnChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnSnChanged()
    End Sub
    Partial Private Sub OnPbChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPbChanged()
    End Sub
    Partial Private Sub OnCoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._EAFT1 = CType(Nothing, EntityRef(Of EAFT1))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FK_EAF1ID", DbType:="Char(38) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property FK_EAF1ID() As String
		Get
			Return Me._FK_EAF1ID
		End Get
		Set
			If (String.Equals(Me._FK_EAF1ID, value) = false) Then
				If Me._EAFT1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFK_EAF1IDChanging(value)
				Me.SendPropertyChanging
				Me._FK_EAF1ID = value
				Me.SendPropertyChanged("FK_EAF1ID")
				Me.OnFK_EAF1IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SampleNumber", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SampleNumber() As Integer
		Get
			Return Me._SampleNumber
		End Get
		Set
			If ((Me._SampleNumber = value)  _
						= false) Then
				Me.OnSampleNumberChanging(value)
				Me.SendPropertyChanging
				Me._SampleNumber = value
				Me.SendPropertyChanged("SampleNumber")
				Me.OnSampleNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_C", DbType:="Decimal(18,3)")>  _
	Public Property C() As System.Nullable(Of Decimal)
		Get
			Return Me._C
		End Get
		Set
			If (Me._C.Equals(value) = false) Then
				Me.OnCChanging(value)
				Me.SendPropertyChanging
				Me._C = value
				Me.SendPropertyChanged("C")
				Me.OnCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Si", DbType:="Decimal(18,3)")>  _
	Public Property Si() As System.Nullable(Of Decimal)
		Get
			Return Me._Si
		End Get
		Set
			If (Me._Si.Equals(value) = false) Then
				Me.OnSiChanging(value)
				Me.SendPropertyChanging
				Me._Si = value
				Me.SendPropertyChanged("Si")
				Me.OnSiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mn", DbType:="Decimal(18,3)")>  _
	Public Property Mn() As System.Nullable(Of Decimal)
		Get
			Return Me._Mn
		End Get
		Set
			If (Me._Mn.Equals(value) = false) Then
				Me.OnMnChanging(value)
				Me.SendPropertyChanging
				Me._Mn = value
				Me.SendPropertyChanged("Mn")
				Me.OnMnChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_P", DbType:="Decimal(18,3)")>  _
	Public Property P() As System.Nullable(Of Decimal)
		Get
			Return Me._P
		End Get
		Set
			If (Me._P.Equals(value) = false) Then
				Me.OnPChanging(value)
				Me.SendPropertyChanging
				Me._P = value
				Me.SendPropertyChanged("P")
				Me.OnPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_S", DbType:="Decimal(18,4)")>  _
	Public Property S() As System.Nullable(Of Decimal)
		Get
			Return Me._S
		End Get
		Set
			If (Me._S.Equals(value) = false) Then
				Me.OnSChanging(value)
				Me.SendPropertyChanging
				Me._S = value
				Me.SendPropertyChanged("S")
				Me.OnSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cr", DbType:="Decimal(18,3)")>  _
	Public Property Cr() As System.Nullable(Of Decimal)
		Get
			Return Me._Cr
		End Get
		Set
			If (Me._Cr.Equals(value) = false) Then
				Me.OnCrChanging(value)
				Me.SendPropertyChanging
				Me._Cr = value
				Me.SendPropertyChanged("Cr")
				Me.OnCrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ni", DbType:="Decimal(18,3)")>  _
	Public Property Ni() As System.Nullable(Of Decimal)
		Get
			Return Me._Ni
		End Get
		Set
			If (Me._Ni.Equals(value) = false) Then
				Me.OnNiChanging(value)
				Me.SendPropertyChanging
				Me._Ni = value
				Me.SendPropertyChanged("Ni")
				Me.OnNiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cu", DbType:="Decimal(18,3)")>  _
	Public Property Cu() As System.Nullable(Of Decimal)
		Get
			Return Me._Cu
		End Get
		Set
			If (Me._Cu.Equals(value) = false) Then
				Me.OnCuChanging(value)
				Me.SendPropertyChanging
				Me._Cu = value
				Me.SendPropertyChanged("Cu")
				Me.OnCuChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mo", DbType:="Decimal(18,3)")>  _
	Public Property Mo() As System.Nullable(Of Decimal)
		Get
			Return Me._Mo
		End Get
		Set
			If (Me._Mo.Equals(value) = false) Then
				Me.OnMoChanging(value)
				Me.SendPropertyChanging
				Me._Mo = value
				Me.SendPropertyChanged("Mo")
				Me.OnMoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sn", DbType:="Decimal(18,4)")>  _
	Public Property Sn() As System.Nullable(Of Decimal)
		Get
			Return Me._Sn
		End Get
		Set
			If (Me._Sn.Equals(value) = false) Then
				Me.OnSnChanging(value)
				Me.SendPropertyChanging
				Me._Sn = value
				Me.SendPropertyChanged("Sn")
				Me.OnSnChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pb", DbType:="Decimal(18,4)")>  _
	Public Property Pb() As System.Nullable(Of Decimal)
		Get
			Return Me._Pb
		End Get
		Set
			If (Me._Pb.Equals(value) = false) Then
				Me.OnPbChanging(value)
				Me.SendPropertyChanging
				Me._Pb = value
				Me.SendPropertyChanged("Pb")
				Me.OnPbChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Co", DbType:="Decimal(18,3)")>  _
	Public Property Co() As System.Nullable(Of Decimal)
		Get
			Return Me._Co
		End Get
		Set
			If (Me._Co.Equals(value) = false) Then
				Me.OnCoChanging(value)
				Me.SendPropertyChanging
				Me._Co = value
				Me.SendPropertyChanged("Co")
				Me.OnCoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EAFT1_EAFT3", Storage:="_EAFT1", ThisKey:="FK_EAF1ID", OtherKey:="ID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property EAFT1() As EAFT1
		Get
			Return Me._EAFT1.Entity
		End Get
		Set
			Dim previousValue As EAFT1 = Me._EAFT1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EAFT1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EAFT1.Entity = Nothing
					previousValue.EAFT3.Remove(Me)
				End If
				Me._EAFT1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EAFT3.Add(Me)
					Me._FK_EAF1ID = value.ID
				Else
					Me._FK_EAF1ID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("EAFT1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EAFT2")>  _
Partial Public Class EAFT2
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FK_EAF1ID As String
	
	Private _OperatorOrder As Integer
	
	Private _StartTime As Date
	
	Private _FK_OperatorTypeID As Integer
	
	Private _Voltage As System.Nullable(Of Integer)
	
	Private _ElectricCurrentPercentage As System.Nullable(Of Integer)
	
	Private _ElectricPower As System.Nullable(Of Integer)
	
	Private _Thermograph As System.Nullable(Of Integer)
	
	Private _Oxygen As System.Nullable(Of Integer)
	
	Private _MemoItem As String
	
	Private _MemoMetal As System.Nullable(Of Integer)
	
	Private _MemoDregs As System.Nullable(Of Integer)
	
	Private _IsInputStartTime As Boolean
	
	Private _EAFT1 As EntityRef(Of EAFT1)
	
	Private _EAFT2_OperatorType As EntityRef(Of EAFT2_OperatorType)
	
    #Region "擴充性方法定義"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFK_EAF1IDChanging(value As String)
    End Sub
    Partial Private Sub OnFK_EAF1IDChanged()
    End Sub
    Partial Private Sub OnOperatorOrderChanging(value As Integer)
    End Sub
    Partial Private Sub OnOperatorOrderChanged()
    End Sub
    Partial Private Sub OnStartTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnStartTimeChanged()
    End Sub
    Partial Private Sub OnFK_OperatorTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFK_OperatorTypeIDChanged()
    End Sub
    Partial Private Sub OnVoltageChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnVoltageChanged()
    End Sub
    Partial Private Sub OnElectricCurrentPercentageChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnElectricCurrentPercentageChanged()
    End Sub
    Partial Private Sub OnElectricPowerChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnElectricPowerChanged()
    End Sub
    Partial Private Sub OnThermographChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnThermographChanged()
    End Sub
    Partial Private Sub OnOxygenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnOxygenChanged()
    End Sub
    Partial Private Sub OnMemoItemChanging(value As String)
    End Sub
    Partial Private Sub OnMemoItemChanged()
    End Sub
    Partial Private Sub OnMemoMetalChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMemoMetalChanged()
    End Sub
    Partial Private Sub OnMemoDregsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMemoDregsChanged()
    End Sub
    Partial Private Sub OnIsInputStartTimeChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsInputStartTimeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._EAFT1 = CType(Nothing, EntityRef(Of EAFT1))
		Me._EAFT2_OperatorType = CType(Nothing, EntityRef(Of EAFT2_OperatorType))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FK_EAF1ID", DbType:="Char(38) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property FK_EAF1ID() As String
		Get
			Return Me._FK_EAF1ID
		End Get
		Set
			If (String.Equals(Me._FK_EAF1ID, value) = false) Then
				If Me._EAFT1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFK_EAF1IDChanging(value)
				Me.SendPropertyChanging
				Me._FK_EAF1ID = value
				Me.SendPropertyChanged("FK_EAF1ID")
				Me.OnFK_EAF1IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OperatorOrder", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property OperatorOrder() As Integer
		Get
			Return Me._OperatorOrder
		End Get
		Set
			If ((Me._OperatorOrder = value)  _
						= false) Then
				Me.OnOperatorOrderChanging(value)
				Me.SendPropertyChanging
				Me._OperatorOrder = value
				Me.SendPropertyChanged("OperatorOrder")
				Me.OnOperatorOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="DateTime NOT NULL")>  _
	Public Property StartTime() As Date
		Get
			Return Me._StartTime
		End Get
		Set
			If ((Me._StartTime = value)  _
						= false) Then
				Me.OnStartTimeChanging(value)
				Me.SendPropertyChanging
				Me._StartTime = value
				Me.SendPropertyChanged("StartTime")
				Me.OnStartTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FK_OperatorTypeID", DbType:="Int NOT NULL")>  _
	Public Property FK_OperatorTypeID() As Integer
		Get
			Return Me._FK_OperatorTypeID
		End Get
		Set
			If ((Me._FK_OperatorTypeID = value)  _
						= false) Then
				If Me._EAFT2_OperatorType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFK_OperatorTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._FK_OperatorTypeID = value
				Me.SendPropertyChanged("FK_OperatorTypeID")
				Me.OnFK_OperatorTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Voltage", DbType:="Int")>  _
	Public Property Voltage() As System.Nullable(Of Integer)
		Get
			Return Me._Voltage
		End Get
		Set
			If (Me._Voltage.Equals(value) = false) Then
				Me.OnVoltageChanging(value)
				Me.SendPropertyChanging
				Me._Voltage = value
				Me.SendPropertyChanged("Voltage")
				Me.OnVoltageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ElectricCurrentPercentage", DbType:="Int")>  _
	Public Property ElectricCurrentPercentage() As System.Nullable(Of Integer)
		Get
			Return Me._ElectricCurrentPercentage
		End Get
		Set
			If (Me._ElectricCurrentPercentage.Equals(value) = false) Then
				Me.OnElectricCurrentPercentageChanging(value)
				Me.SendPropertyChanging
				Me._ElectricCurrentPercentage = value
				Me.SendPropertyChanged("ElectricCurrentPercentage")
				Me.OnElectricCurrentPercentageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ElectricPower", DbType:="Int")>  _
	Public Property ElectricPower() As System.Nullable(Of Integer)
		Get
			Return Me._ElectricPower
		End Get
		Set
			If (Me._ElectricPower.Equals(value) = false) Then
				Me.OnElectricPowerChanging(value)
				Me.SendPropertyChanging
				Me._ElectricPower = value
				Me.SendPropertyChanged("ElectricPower")
				Me.OnElectricPowerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Thermograph", DbType:="Int")>  _
	Public Property Thermograph() As System.Nullable(Of Integer)
		Get
			Return Me._Thermograph
		End Get
		Set
			If (Me._Thermograph.Equals(value) = false) Then
				Me.OnThermographChanging(value)
				Me.SendPropertyChanging
				Me._Thermograph = value
				Me.SendPropertyChanged("Thermograph")
				Me.OnThermographChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Oxygen", DbType:="Int")>  _
	Public Property Oxygen() As System.Nullable(Of Integer)
		Get
			Return Me._Oxygen
		End Get
		Set
			If (Me._Oxygen.Equals(value) = false) Then
				Me.OnOxygenChanging(value)
				Me.SendPropertyChanging
				Me._Oxygen = value
				Me.SendPropertyChanged("Oxygen")
				Me.OnOxygenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MemoItem", DbType:="Char(20)")>  _
	Public Property MemoItem() As String
		Get
			Return Me._MemoItem
		End Get
		Set
			If (String.Equals(Me._MemoItem, value) = false) Then
				Me.OnMemoItemChanging(value)
				Me.SendPropertyChanging
				Me._MemoItem = value
				Me.SendPropertyChanged("MemoItem")
				Me.OnMemoItemChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MemoMetal", DbType:="Int")>  _
	Public Property MemoMetal() As System.Nullable(Of Integer)
		Get
			Return Me._MemoMetal
		End Get
		Set
			If (Me._MemoMetal.Equals(value) = false) Then
				Me.OnMemoMetalChanging(value)
				Me.SendPropertyChanging
				Me._MemoMetal = value
				Me.SendPropertyChanged("MemoMetal")
				Me.OnMemoMetalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MemoDregs", DbType:="Int")>  _
	Public Property MemoDregs() As System.Nullable(Of Integer)
		Get
			Return Me._MemoDregs
		End Get
		Set
			If (Me._MemoDregs.Equals(value) = false) Then
				Me.OnMemoDregsChanging(value)
				Me.SendPropertyChanging
				Me._MemoDregs = value
				Me.SendPropertyChanged("MemoDregs")
				Me.OnMemoDregsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsInputStartTime", DbType:="Bit NOT NULL")>  _
	Public Property IsInputStartTime() As Boolean
		Get
			Return Me._IsInputStartTime
		End Get
		Set
			If ((Me._IsInputStartTime = value)  _
						= false) Then
				Me.OnIsInputStartTimeChanging(value)
				Me.SendPropertyChanging
				Me._IsInputStartTime = value
				Me.SendPropertyChanged("IsInputStartTime")
				Me.OnIsInputStartTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EAFT1_EAFT2", Storage:="_EAFT1", ThisKey:="FK_EAF1ID", OtherKey:="ID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property EAFT1() As EAFT1
		Get
			Return Me._EAFT1.Entity
		End Get
		Set
			Dim previousValue As EAFT1 = Me._EAFT1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EAFT1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EAFT1.Entity = Nothing
					previousValue.EAFT2.Remove(Me)
				End If
				Me._EAFT1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EAFT2.Add(Me)
					Me._FK_EAF1ID = value.ID
				Else
					Me._FK_EAF1ID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("EAFT1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EAFT2_OperatorType_EAFT2", Storage:="_EAFT2_OperatorType", ThisKey:="FK_OperatorTypeID", OtherKey:="OperatorTypeID", IsForeignKey:=true)>  _
	Public Property EAFT2_OperatorType() As EAFT2_OperatorType
		Get
			Return Me._EAFT2_OperatorType.Entity
		End Get
		Set
			Dim previousValue As EAFT2_OperatorType = Me._EAFT2_OperatorType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EAFT2_OperatorType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EAFT2_OperatorType.Entity = Nothing
					previousValue.EAFT2.Remove(Me)
				End If
				Me._EAFT2_OperatorType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EAFT2.Add(Me)
					Me._FK_OperatorTypeID = value.OperatorTypeID
				Else
					Me._FK_OperatorTypeID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("EAFT2_OperatorType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EAFT2_Analysis")>  _
Partial Public Class EAFT2_Analysis
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FK_EAF1ID As String
	
	Private _FK_OperatorTypeID As Integer
	
	Private _TONValue As System.Nullable(Of Decimal)
	
	Private _Bucket As System.Nullable(Of Integer)
	
	Private _EAFT1 As EntityRef(Of EAFT1)
	
	Private _EAFT2_OperatorType As EntityRef(Of EAFT2_OperatorType)
	
    #Region "擴充性方法定義"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFK_EAF1IDChanging(value As String)
    End Sub
    Partial Private Sub OnFK_EAF1IDChanged()
    End Sub
    Partial Private Sub OnFK_OperatorTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFK_OperatorTypeIDChanged()
    End Sub
    Partial Private Sub OnTONValueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTONValueChanged()
    End Sub
    Partial Private Sub OnBucketChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBucketChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._EAFT1 = CType(Nothing, EntityRef(Of EAFT1))
		Me._EAFT2_OperatorType = CType(Nothing, EntityRef(Of EAFT2_OperatorType))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FK_EAF1ID", DbType:="Char(38) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property FK_EAF1ID() As String
		Get
			Return Me._FK_EAF1ID
		End Get
		Set
			If (String.Equals(Me._FK_EAF1ID, value) = false) Then
				If Me._EAFT1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFK_EAF1IDChanging(value)
				Me.SendPropertyChanging
				Me._FK_EAF1ID = value
				Me.SendPropertyChanged("FK_EAF1ID")
				Me.OnFK_EAF1IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FK_OperatorTypeID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property FK_OperatorTypeID() As Integer
		Get
			Return Me._FK_OperatorTypeID
		End Get
		Set
			If ((Me._FK_OperatorTypeID = value)  _
						= false) Then
				If Me._EAFT2_OperatorType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFK_OperatorTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._FK_OperatorTypeID = value
				Me.SendPropertyChanged("FK_OperatorTypeID")
				Me.OnFK_OperatorTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TONValue", DbType:="Decimal(18,2)")>  _
	Public Property TONValue() As System.Nullable(Of Decimal)
		Get
			Return Me._TONValue
		End Get
		Set
			If (Me._TONValue.Equals(value) = false) Then
				Me.OnTONValueChanging(value)
				Me.SendPropertyChanging
				Me._TONValue = value
				Me.SendPropertyChanged("TONValue")
				Me.OnTONValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bucket", DbType:="Int")>  _
	Public Property Bucket() As System.Nullable(Of Integer)
		Get
			Return Me._Bucket
		End Get
		Set
			If (Me._Bucket.Equals(value) = false) Then
				Me.OnBucketChanging(value)
				Me.SendPropertyChanging
				Me._Bucket = value
				Me.SendPropertyChanged("Bucket")
				Me.OnBucketChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EAFT1_EAFT2_Analysis", Storage:="_EAFT1", ThisKey:="FK_EAF1ID", OtherKey:="ID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property EAFT1() As EAFT1
		Get
			Return Me._EAFT1.Entity
		End Get
		Set
			Dim previousValue As EAFT1 = Me._EAFT1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EAFT1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EAFT1.Entity = Nothing
					previousValue.EAFT2_Analysis.Remove(Me)
				End If
				Me._EAFT1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EAFT2_Analysis.Add(Me)
					Me._FK_EAF1ID = value.ID
				Else
					Me._FK_EAF1ID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("EAFT1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EAFT2_OperatorType_EAFT2_Analysis", Storage:="_EAFT2_OperatorType", ThisKey:="FK_OperatorTypeID", OtherKey:="OperatorTypeID", IsForeignKey:=true)>  _
	Public Property EAFT2_OperatorType() As EAFT2_OperatorType
		Get
			Return Me._EAFT2_OperatorType.Entity
		End Get
		Set
			Dim previousValue As EAFT2_OperatorType = Me._EAFT2_OperatorType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EAFT2_OperatorType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EAFT2_OperatorType.Entity = Nothing
					previousValue.EAFT2_Analysis.Remove(Me)
				End If
				Me._EAFT2_OperatorType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EAFT2_Analysis.Add(Me)
					Me._FK_OperatorTypeID = value.OperatorTypeID
				Else
					Me._FK_OperatorTypeID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("EAFT2_OperatorType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EAFT2_OperatorType")>  _
Partial Public Class EAFT2_OperatorType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _OperatorTypeID As Integer
	
	Private _OperatorTypeName As String
	
	Private _OperatorOrder As System.Nullable(Of Integer)
	
	Private _EAFT2 As EntitySet(Of EAFT2)
	
	Private _EAFT2_Analysis As EntitySet(Of EAFT2_Analysis)
	
	Private _EAFT2_Wait As EntitySet(Of EAFT2_Wait)
	
    #Region "擴充性方法定義"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOperatorTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOperatorTypeIDChanged()
    End Sub
    Partial Private Sub OnOperatorTypeNameChanging(value As String)
    End Sub
    Partial Private Sub OnOperatorTypeNameChanged()
    End Sub
    Partial Private Sub OnOperatorOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnOperatorOrderChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._EAFT2 = New EntitySet(Of EAFT2)(AddressOf Me.attach_EAFT2, AddressOf Me.detach_EAFT2)
		Me._EAFT2_Analysis = New EntitySet(Of EAFT2_Analysis)(AddressOf Me.attach_EAFT2_Analysis, AddressOf Me.detach_EAFT2_Analysis)
		Me._EAFT2_Wait = New EntitySet(Of EAFT2_Wait)(AddressOf Me.attach_EAFT2_Wait, AddressOf Me.detach_EAFT2_Wait)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OperatorTypeID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property OperatorTypeID() As Integer
		Get
			Return Me._OperatorTypeID
		End Get
		Set
			If ((Me._OperatorTypeID = value)  _
						= false) Then
				Me.OnOperatorTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._OperatorTypeID = value
				Me.SendPropertyChanged("OperatorTypeID")
				Me.OnOperatorTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OperatorTypeName", DbType:="Char(20)")>  _
	Public Property OperatorTypeName() As String
		Get
			Return Me._OperatorTypeName
		End Get
		Set
			If (String.Equals(Me._OperatorTypeName, value) = false) Then
				Me.OnOperatorTypeNameChanging(value)
				Me.SendPropertyChanging
				Me._OperatorTypeName = value
				Me.SendPropertyChanged("OperatorTypeName")
				Me.OnOperatorTypeNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OperatorOrder", DbType:="Int")>  _
	Public Property OperatorOrder() As System.Nullable(Of Integer)
		Get
			Return Me._OperatorOrder
		End Get
		Set
			If (Me._OperatorOrder.Equals(value) = false) Then
				Me.OnOperatorOrderChanging(value)
				Me.SendPropertyChanging
				Me._OperatorOrder = value
				Me.SendPropertyChanged("OperatorOrder")
				Me.OnOperatorOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EAFT2_OperatorType_EAFT2", Storage:="_EAFT2", ThisKey:="OperatorTypeID", OtherKey:="FK_OperatorTypeID")>  _
	Public Property EAFT2() As EntitySet(Of EAFT2)
		Get
			Return Me._EAFT2
		End Get
		Set
			Me._EAFT2.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EAFT2_OperatorType_EAFT2_Analysis", Storage:="_EAFT2_Analysis", ThisKey:="OperatorTypeID", OtherKey:="FK_OperatorTypeID")>  _
	Public Property EAFT2_Analysis() As EntitySet(Of EAFT2_Analysis)
		Get
			Return Me._EAFT2_Analysis
		End Get
		Set
			Me._EAFT2_Analysis.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EAFT2_OperatorType_EAFT2_Wait", Storage:="_EAFT2_Wait", ThisKey:="OperatorTypeID", OtherKey:="FK_OperatorTypeID")>  _
	Public Property EAFT2_Wait() As EntitySet(Of EAFT2_Wait)
		Get
			Return Me._EAFT2_Wait
		End Get
		Set
			Me._EAFT2_Wait.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_EAFT2(ByVal entity As EAFT2)
		Me.SendPropertyChanging
		entity.EAFT2_OperatorType = Me
	End Sub
	
	Private Sub detach_EAFT2(ByVal entity As EAFT2)
		Me.SendPropertyChanging
		entity.EAFT2_OperatorType = Nothing
	End Sub
	
	Private Sub attach_EAFT2_Analysis(ByVal entity As EAFT2_Analysis)
		Me.SendPropertyChanging
		entity.EAFT2_OperatorType = Me
	End Sub
	
	Private Sub detach_EAFT2_Analysis(ByVal entity As EAFT2_Analysis)
		Me.SendPropertyChanging
		entity.EAFT2_OperatorType = Nothing
	End Sub
	
	Private Sub attach_EAFT2_Wait(ByVal entity As EAFT2_Wait)
		Me.SendPropertyChanging
		entity.EAFT2_OperatorType = Me
	End Sub
	
	Private Sub detach_EAFT2_Wait(ByVal entity As EAFT2_Wait)
		Me.SendPropertyChanging
		entity.EAFT2_OperatorType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EAFT2_Wait")>  _
Partial Public Class EAFT2_Wait
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FK_EAF1ID As String
	
	Private _FK_OperatorTypeID As Integer
	
	Private _EventNumber As Integer
	
	Private _StartTime As Date
	
	Private _EndTime As Date
	
	Private _WaitReason As String
	
	Private _EAFT1 As EntityRef(Of EAFT1)
	
	Private _EAFT2_OperatorType As EntityRef(Of EAFT2_OperatorType)
	
    #Region "擴充性方法定義"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFK_EAF1IDChanging(value As String)
    End Sub
    Partial Private Sub OnFK_EAF1IDChanged()
    End Sub
    Partial Private Sub OnFK_OperatorTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFK_OperatorTypeIDChanged()
    End Sub
    Partial Private Sub OnEventNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnEventNumberChanged()
    End Sub
    Partial Private Sub OnStartTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnStartTimeChanged()
    End Sub
    Partial Private Sub OnEndTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnEndTimeChanged()
    End Sub
    Partial Private Sub OnWaitReasonChanging(value As String)
    End Sub
    Partial Private Sub OnWaitReasonChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._EAFT1 = CType(Nothing, EntityRef(Of EAFT1))
		Me._EAFT2_OperatorType = CType(Nothing, EntityRef(Of EAFT2_OperatorType))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FK_EAF1ID", DbType:="Char(38) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property FK_EAF1ID() As String
		Get
			Return Me._FK_EAF1ID
		End Get
		Set
			If (String.Equals(Me._FK_EAF1ID, value) = false) Then
				If Me._EAFT1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFK_EAF1IDChanging(value)
				Me.SendPropertyChanging
				Me._FK_EAF1ID = value
				Me.SendPropertyChanged("FK_EAF1ID")
				Me.OnFK_EAF1IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FK_OperatorTypeID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property FK_OperatorTypeID() As Integer
		Get
			Return Me._FK_OperatorTypeID
		End Get
		Set
			If ((Me._FK_OperatorTypeID = value)  _
						= false) Then
				If Me._EAFT2_OperatorType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFK_OperatorTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._FK_OperatorTypeID = value
				Me.SendPropertyChanged("FK_OperatorTypeID")
				Me.OnFK_OperatorTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventNumber", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property EventNumber() As Integer
		Get
			Return Me._EventNumber
		End Get
		Set
			If ((Me._EventNumber = value)  _
						= false) Then
				Me.OnEventNumberChanging(value)
				Me.SendPropertyChanging
				Me._EventNumber = value
				Me.SendPropertyChanged("EventNumber")
				Me.OnEventNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="DateTime NOT NULL")>  _
	Public Property StartTime() As Date
		Get
			Return Me._StartTime
		End Get
		Set
			If ((Me._StartTime = value)  _
						= false) Then
				Me.OnStartTimeChanging(value)
				Me.SendPropertyChanging
				Me._StartTime = value
				Me.SendPropertyChanged("StartTime")
				Me.OnStartTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="DateTime NOT NULL")>  _
	Public Property EndTime() As Date
		Get
			Return Me._EndTime
		End Get
		Set
			If ((Me._EndTime = value)  _
						= false) Then
				Me.OnEndTimeChanging(value)
				Me.SendPropertyChanging
				Me._EndTime = value
				Me.SendPropertyChanged("EndTime")
				Me.OnEndTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WaitReason", DbType:="Char(20)")>  _
	Public Property WaitReason() As String
		Get
			Return Me._WaitReason
		End Get
		Set
			If (String.Equals(Me._WaitReason, value) = false) Then
				Me.OnWaitReasonChanging(value)
				Me.SendPropertyChanging
				Me._WaitReason = value
				Me.SendPropertyChanged("WaitReason")
				Me.OnWaitReasonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EAFT1_EAFT2_Wait", Storage:="_EAFT1", ThisKey:="FK_EAF1ID", OtherKey:="ID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property EAFT1() As EAFT1
		Get
			Return Me._EAFT1.Entity
		End Get
		Set
			Dim previousValue As EAFT1 = Me._EAFT1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EAFT1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EAFT1.Entity = Nothing
					previousValue.EAFT2_Wait.Remove(Me)
				End If
				Me._EAFT1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EAFT2_Wait.Add(Me)
					Me._FK_EAF1ID = value.ID
				Else
					Me._FK_EAF1ID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("EAFT1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EAFT2_OperatorType_EAFT2_Wait", Storage:="_EAFT2_OperatorType", ThisKey:="FK_OperatorTypeID", OtherKey:="OperatorTypeID", IsForeignKey:=true)>  _
	Public Property EAFT2_OperatorType() As EAFT2_OperatorType
		Get
			Return Me._EAFT2_OperatorType.Entity
		End Get
		Set
			Dim previousValue As EAFT2_OperatorType = Me._EAFT2_OperatorType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EAFT2_OperatorType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EAFT2_OperatorType.Entity = Nothing
					previousValue.EAFT2_Wait.Remove(Me)
				End If
				Me._EAFT2_OperatorType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EAFT2_Wait.Add(Me)
					Me._FK_OperatorTypeID = value.OperatorTypeID
				Else
					Me._FK_OperatorTypeID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("EAFT2_OperatorType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
